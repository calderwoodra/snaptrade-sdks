# {{artifactId}}

{{appName}}
- API version: {{appVersion}}
{{^hideGenerationTimestamp}}
  - Build date: {{generatedDate}}
{{/hideGenerationTimestamp}}

{{{appDescriptionWithNewLines}}}

{{#infoUrl}}
  For more information, please visit [{{{infoUrl}}}]({{{infoUrl}}})
{{/infoUrl}}

*Automatically generated by the [Konfig](https://konfigthis.com)*


## Requirements

Building the API client library requires:
1. Java 1.8+
2. Maven (3.8.3+)/Gradle (7.2+)

## Installation

To install the API client library to your local Maven repository, simply execute:

```shell
mvn clean install
```

To deploy it to a remote Maven repository instead, configure the settings of the repository and execute:

```shell
mvn clean deploy
```

Refer to the [OSSRH Guide](http://central.sonatype.org/pages/ossrh-guide.html) for more information.

### Maven users

Add this dependency to your project's POM:

```xml
<dependency>
  <groupId>{{{groupId}}}</groupId>
  <artifactId>{{{artifactId}}}</artifactId>
  <version>{{{artifactVersion}}}</version>
  <scope>compile</scope>
</dependency>
```

### Gradle users

Add this dependency to your project's build file:

```groovy
  repositories {
    mavenCentral()     // Needed if the '{{{artifactId}}}' jar has been published to maven central.
    mavenLocal()       // Needed if the '{{{artifactId}}}' jar has been published to the local maven repo.
  }

  dependencies {
     implementation "{{{groupId}}}:{{{artifactId}}}:{{{artifactVersion}}}"
  }
```

### Others

At first generate the JAR by executing:

```shell
mvn clean package
```

Then manually install the following JARs:

* `target/{{{artifactId}}}-{{{artifactVersion}}}.jar`
* `target/lib/*.jar`

## Getting Started

Please follow the [installation](#installation) instruction and execute the following Java code:

```java
{{#apiInfo}}{{#apis}}{{#-first}}{{#operations}}{{#operation}}{{#-first}}
// Import classes:
import {{{invokerPackage}}}.ApiClient;
import {{{invokerPackage}}}.ApiException;
import {{{invokerPackage}}}.Configuration;{{#hasAuthMethods}}
import {{{invokerPackage}}}.auth.*;{{/hasAuthMethods}}
import {{{invokerPackage}}}.api.*;
import {{{invokerPackage}}}.models.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

public class Example {

  // 1) Initialize the default client with your clientID and consumerKey. 
  static {
      Configuration.setDefaultClientId("YOUR_CLIENT_ID");
      Configuration.setDefaultConsumerKey("YOUR_CONSUMER_KEY");
  }

  public static void main(String[] args) {
      ApiClient defaultClient = Configuration.getDefaultApiClient();

      // 2) Check that the client is able to make a request to the API server
      ApiStatusApi apiStatusApi = new ApiStatusApi(defaultClient);
      Status status = apiStatusApi.rootGet();
      System.out.printf("SnapTrade is online: %s\n", status.getOnline());

      // 3) Create a new user on SnapTrade
      AuthenticationApi authenticationApi = new AuthenticationApi(defaultClient);

      // The userId should be provided by you and refer to permanent value such as a database row ID
      UUID userId = UUID.randomUUID();
      UserIDandSecret userIDandSecret = authenticationApi.snapTradeRegisterUserPost(new SnapTradeRegisterUserRequestBody().userId(userId.toString()));
      // Note: A user secret is only generated once. It's required to access resources for certain endpoints
      System.out.printf("userID: %s, userSecret: %s\n", userIDandSecret.getUserId(), userIDandSecret.getUserSecret());

      //  4) Get a redirect URI. Users will need this to connect their brokerage to the SnapTrade server
      SnapTradeLoginPost200Response response = authenticationApi.snapTradeLoginPost(userIDandSecret.getUserId(), userIDandSecret.getUserSecret(), new SnapTradeLoginUserRequestBody());
      System.out.println(response.getLoginRedirectURI().getRedirectURI());

      // 5) Make a portfolio group and query
      PortfolioManagementApi portfolioManagementApi = new PortfolioManagementApi(defaultClient);
      Map<String, Object> portfolioGroupPostBody = new HashMap<>();
      portfolioGroupPostBody.put("id", UUID.randomUUID().toString());
      portfolioGroupPostBody.put("name", "MyPortfolio");
      List<PortfolioGroup> portfolioGroupsFromPost = portfolioManagementApi.portfolioGroupsPost(userIDandSecret.getUserId(), userIDandSecret.getUserSecret(), portfolioGroupPostBody);
      System.out.println(portfolioGroupsFromPost);
      List<PortfolioGroup> portfolioGroups = portfolioManagementApi.portfolioGroupsGet(userIDandSecret.getUserId(), userIDandSecret.getUserSecret());
      System.out.println(portfolioGroups);

      // 6) Accept the disclaimer
      ApiDisclaimerApi apiDisclaimerApi = new ApiDisclaimerApi(defaultClient);
      SnapTradeAPIDisclaimerAcceptStatus snapTradeAPIDisclaimerAcceptStatus = apiDisclaimerApi.snapTradeAcceptDisclaimerPost(userIDandSecret.getUserId(), userIDandSecret.getUserSecret(), new SnapTradeAcceptDisclaimerPostRequest().accepted(true));
      System.out.println(snapTradeAPIDisclaimerAcceptStatus);

      AccountInformationApi accountInformationApi = new AccountInformationApi(defaultClient);
      ReferenceDataApi referenceDataApi = new ReferenceDataApi(defaultClient);

      // 7) Query holdings and available brokerages
      List<AccountHoldings> holdings = accountInformationApi.holdingsGet(userIDandSecret.getUserId(), userIDandSecret.getUserSecret(), null);
      System.out.println(holdings);
      List<Account> accounts = accountInformationApi.accountsGet(userIDandSecret.getUserId(), userIDandSecret.getUserSecret());
      System.out.println(accounts);
      List<Brokerage> brokerages = referenceDataApi.brokeragesGet();
      System.out.println(brokerages);

      // 8) Deleting a user
      DeleteUserResponse deleteUserResponse = authenticationApi.snapTradeDeleteUserDelete(userIDandSecret.getUserId());
      System.out.println(deleteUserResponse);
  }
}
{{/-first}}{{/operation}}{{/operations}}{{/-first}}{{/apis}}{{/apiInfo}}
```

## Documentation for API Endpoints

All URIs are relative to *{{basePath}}*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}*{{classname}}* | [**{{operationId}}**]({{apiDocPath}}{{classname}}.md#{{operationId}}) | **{{httpMethod}}** {{path}} | {{summary}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

## Documentation for Models

{{#models}}{{#model}} - [{{classname}}]({{modelDocPath}}{{classname}}.md)
{{/model}}{{/models}}

## Documentation for Authorization

{{^authMethods}}All endpoints do not require authorization.
{{/authMethods}}Authentication schemes defined for the API:
{{#authMethods}}### {{name}}

{{#isApiKey}}- **Type**: API key
- **API key parameter name**: {{keyParamName}}
- **Location**: {{#isKeyInQuery}}URL query string{{/isKeyInQuery}}{{#isKeyInHeader}}HTTP header{{/isKeyInHeader}}
{{/isApiKey}}
{{#isBasic}}- **Type**: HTTP basic authentication
{{/isBasic}}
{{#isOAuth}}- **Type**: OAuth
- **Flow**: {{flow}}
- **Authorization URL**: {{authorizationUrl}}
- **Scopes**: {{^scopes}}N/A{{/scopes}}
{{#scopes}}  - {{scope}}: {{description}}
{{/scopes}}
{{/isOAuth}}

{{/authMethods}}

## Recommendation

It's recommended to create an instance of `ApiClient` per thread in a multithreaded environment to avoid any potential issues.

## Author

{{#apiInfo}}{{#apis}}{{#-last}}{{infoEmail}}
{{/-last}}{{/apis}}{{/apiInfo}}
