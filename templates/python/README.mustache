# {{{projectName}}}
{{#appDescriptionWithNewLines}}
{{{.}}}
{{/appDescriptionWithNewLines}}

This Python package is automatically generated by the [Konfig](https://konfigthis.com):

- API version: {{appVersion}}
- Package version: {{packageVersion}}
{{^hideGenerationTimestamp}}
- Build date: {{generatedDate}}
{{/hideGenerationTimestamp}}
- Build package: {{generatorClass}}
{{#infoUrl}}
For more information, please visit [{{{infoUrl}}}]({{{infoUrl}}})
{{/infoUrl}}

## Requirements.

Python {{{generatorLanguageVersion}}}

## Installation & Usage
### pip install

```sh
pip install {{projectName}}
```
(you may need to run `pip` with root permission: `sudo pip install {{projectName}}`)

Then import the package:
```python
import {{{packageName}}}
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).

```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

Then import the package:
```python
import {{{packageName}}}
```

## Getting Started

Please follow the [installation procedure](#installation--usage) and then run the following:

```python
import uuid
import snaptrade_client
from pprint import pprint
from snaptrade_client.api import api_status_api
from snaptrade_client.api import authentication_api
from snaptrade_client.api import account_information_api
from snaptrade_client.model.snap_trade_register_user_request_body import SnapTradeRegisterUserRequestBody

# 1) Initialize a client with your clientID and consumerKey.
configuration = snaptrade_client.Configuration(client_id="YOUR_CLIENT_ID",
                                               consumer_key="YOUR_CONSUMER_KEY")

with snaptrade_client.ApiClient(configuration) as api_client:
    # 2) Check that the client is able to make a request to the API server.
    api_status_api_inst = api_status_api.APIStatusApi(api_client)
    api_response = api_status_api_inst.root_get()
    pprint(api_response)

    # 3) Create a new user on SnapTrade
    user_id = str(uuid.uuid4())
    authentication_api_inst = authentication_api.AuthenticationApi(api_client)
    register_response = authentication_api_inst.snap_trade_register_user_post(
        SnapTradeRegisterUserRequestBody(user_id=user_id))
    pprint(register_response)

    # Note: A user secret is only generated once. It's required to access
    # resources for certain endpoints.
    user_secret = register_response.user_secret

    # 4) Get a redirect URI. Users will need this to connect
    # their brokerage to the SnapTrade server.
    redirect_uri = authentication_api_inst.snap_trade_login_post(user_id, user_secret)

    # 5) Obtaining account holdings data
    account_information_api_inst = account_information_api.AccountInformationApi(api_client)
    holdings = account_information_api_inst.holdings_get(user_id, user_secret)
    pprint(holdings)

    # 6) Deleting a user
    deleted_response = authentication_api_inst.snap_trade_delete_user_delete(user_id)
    pprint(deleted_response)
```

## Documentation for API Endpoints

All URIs are relative to *{{basePath}}*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}*{{classname}}* | [**{{operationId}}**]({{apiDocPath}}{{classname}}.md#{{operationIdLowerCase}}) | **{{httpMethod}}** {{path}} | {{summary}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

## Documentation For Models

{{#models}}{{#model}} - [{{{classname}}}]({{modelDocPath}}{{{classname}}}.md)
{{/model}}{{/models}}

## Documentation For Authorization

{{^authMethods}}
 All endpoints do not require authorization.
{{/authMethods}}
{{#authMethods}}
{{#last}} Authentication schemes defined for the API:{{/last}}
## {{{name}}}

{{#isApiKey}}
- **Type**: API key
- **API key parameter name**: {{{keyParamName}}}
- **Location**: {{#isKeyInQuery}}URL query string{{/isKeyInQuery}}{{#isKeyInHeader}}HTTP header{{/isKeyInHeader}}
{{/isApiKey}}
{{#isBasic}}
{{#isBasicBasic}}
- **Type**: HTTP basic authentication
{{/isBasicBasic}}
{{#isBasicBearer}}
- **Type**: Bearer authentication{{#bearerFormat}} ({{{.}}}){{/bearerFormat}}
{{/isBasicBearer}}
{{#isHttpSignature}}
- **Type**: HTTP signature authentication
{{/isHttpSignature}}
{{/isBasic}}
{{#isOAuth}}
- **Type**: OAuth
- **Flow**: {{{flow}}}
- **Authorization URL**: {{{authorizationUrl}}}
- **Scopes**: {{^scopes}}N/A{{/scopes}}
{{#scopes}} - **{{{scope}}}**: {{{description}}}
{{/scopes}}
{{/isOAuth}}

{{/authMethods}}

## Author

{{#apiInfo}}{{#apis}}{{#-last}}{{infoEmail}}
{{/-last}}{{/apis}}{{/apiInfo}}

## Notes for Large OpenAPI documents
If the OpenAPI document is large, imports in {{{packageName}}}.apis and {{{packageName}}}.models may fail with a
RecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions:

Solution 1:
Use specific imports for apis and models like:
- `from {{{packageName}}}.api.default_api import DefaultApi`
- `from {{{packageName}}}.model.pet import Pet`

Solution 2:
Before importing the package, adjust the maximum recursion limit as shown below:
```
import sys
sys.setrecursionlimit(1500)
import {{{packageName}}}
from {{{packageName}}}.apis import *
from {{{packageName}}}.models import *
```
