=begin
#SnapTrade

#Connect brokerage accounts to your app for live positions and trading

The version of the OpenAPI document: 1.0.0
Contact: api@snaptrade.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module OpenapiClient
  class APIDisclaimerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Accept or Reject SnapTrade disclaimer agreement
    # @param user_id [String] 
    # @param user_secret [String] 
    # @param api_disclaimer_accept_request [APIDisclaimerAcceptRequest] 
    # @param [Hash] opts the optional parameters
    # @return [SnapTradeAPIDisclaimerAcceptStatus]
    def accept(user_id, user_secret, api_disclaimer_accept_request, opts = {})
      data, _status_code, _headers = accept_with_http_info(user_id, user_secret, api_disclaimer_accept_request, opts)
      data
    end

    # Accept or Reject SnapTrade disclaimer agreement
    # @param user_id [String] 
    # @param user_secret [String] 
    # @param api_disclaimer_accept_request [APIDisclaimerAcceptRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SnapTradeAPIDisclaimerAcceptStatus, Integer, Hash)>] SnapTradeAPIDisclaimerAcceptStatus data, response status code and response headers
    def accept_with_http_info(user_id, user_secret, api_disclaimer_accept_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: APIDisclaimerApi.accept ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling APIDisclaimerApi.accept"
      end
      # verify the required parameter 'user_secret' is set
      if @api_client.config.client_side_validation && user_secret.nil?
        fail ArgumentError, "Missing the required parameter 'user_secret' when calling APIDisclaimerApi.accept"
      end
      # verify the required parameter 'api_disclaimer_accept_request' is set
      if @api_client.config.client_side_validation && api_disclaimer_accept_request.nil?
        fail ArgumentError, "Missing the required parameter 'api_disclaimer_accept_request' when calling APIDisclaimerApi.accept"
      end
      # resource path
      local_var_path = '/snapTrade/acceptDisclaimer'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userId'] = user_id
      query_params[:'userSecret'] = user_secret

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(api_disclaimer_accept_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SnapTradeAPIDisclaimerAcceptStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['PartnerClientId', 'PartnerSignature', 'PartnerTimestamp']

      new_options = opts.merge(
        :operation => :"APIDisclaimerApi.accept",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: APIDisclaimerApi#accept\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
