/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// ModelAssetClassDetails
    /// </summary>
    [DataContract(Name = "ModelAssetClassDetails")]
    public partial class ModelAssetClassDetails : IEquatable<ModelAssetClassDetails>, IValidatableObject
    {
        /// <summary>
            /// Default constructor for <see cref="ModelAssetClassDetails" /> class.
            /// </summary>
        public ModelAssetClassDetails()
        {
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ModelAssetClassDetails" /> class.
        /// </summary>
        /// <param name="modelAssetClass">modelAssetClass.</param>
        /// <param name="modelAssetClassTarget">modelAssetClassTarget.</param>
        public ModelAssetClassDetails(ModelAssetClass modelAssetClass = default(ModelAssetClass), List<ModelAssetClassTarget> modelAssetClassTarget = default(List<ModelAssetClassTarget>))
        {
            this.ModelAssetClass = modelAssetClass;
            this.ModelAssetClassTarget = modelAssetClassTarget;
        }

        /// <summary>
        /// Gets or Sets ModelAssetClass
        /// </summary>
        [DataMember(Name = "model_asset_class", EmitDefaultValue = false)]
        public ModelAssetClass ModelAssetClass { get; set; }

        /// <summary>
        /// Gets or Sets ModelAssetClassTarget
        /// </summary>
        [DataMember(Name = "model_asset_class_target", EmitDefaultValue = false)]
        public List<ModelAssetClassTarget> ModelAssetClassTarget { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelAssetClassDetails {\n");
            sb.Append("  ModelAssetClass: ").Append(ModelAssetClass).Append("\n");
            sb.Append("  ModelAssetClassTarget: ").Append(ModelAssetClassTarget).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelAssetClassDetails);
        }

        /// <summary>
        /// Returns true if ModelAssetClassDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelAssetClassDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelAssetClassDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ModelAssetClass == input.ModelAssetClass ||
                    (this.ModelAssetClass != null &&
                    this.ModelAssetClass.Equals(input.ModelAssetClass))
                ) && 
                (
                    this.ModelAssetClassTarget == input.ModelAssetClassTarget ||
                    this.ModelAssetClassTarget != null &&
                    input.ModelAssetClassTarget != null &&
                    this.ModelAssetClassTarget.SequenceEqual(input.ModelAssetClassTarget)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ModelAssetClass != null)
                {
                    hashCode = (hashCode * 59) + this.ModelAssetClass.GetHashCode();
                }
                if (this.ModelAssetClassTarget != null)
                {
                    hashCode = (hashCode * 59) + this.ModelAssetClassTarget.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
