/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// CreateSnapTradeParterApiCredentialsRequest
    /// </summary>
    [DataContract(Name = "CreateSnapTradeParterApiCredentialsRequest")]
    public partial class CreateSnapTradeParterApiCredentialsRequest : IEquatable<CreateSnapTradeParterApiCredentialsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSnapTradeParterApiCredentialsRequest" /> class.
        /// </summary>
        /// <param name="brokerageAuthorizationTypeId">Brokerage Authorization Type ID from BrokerageAuthorizationType object.</param>
        /// <param name="brokerageAPIClientId">API Client ID from brokerage when registering app.</param>
        /// <param name="brokerageAPIClientSecret">API Client Secret from brokerage when registering app.</param>
        /// <param name="redirectURI">Redirect uri from brokerage when registering app.</param>
        public CreateSnapTradeParterApiCredentialsRequest(Object brokerageAuthorizationTypeId = default(Object), Object brokerageAPIClientId = default(Object), Object brokerageAPIClientSecret = default(Object), Object redirectURI = default(Object)) : base()
        {
            this.BrokerageAuthorizationTypeId = brokerageAuthorizationTypeId;
            this.BrokerageAPIClientId = brokerageAPIClientId;
            this.BrokerageAPIClientSecret = brokerageAPIClientSecret;
            this.RedirectURI = redirectURI;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Brokerage Authorization Type ID from BrokerageAuthorizationType object
        /// </summary>
        /// <value>Brokerage Authorization Type ID from BrokerageAuthorizationType object</value>
        [DataMember(Name = "brokerageAuthorizationTypeId", EmitDefaultValue = true)]
        public Object BrokerageAuthorizationTypeId { get; set; }

        /// <summary>
        /// API Client ID from brokerage when registering app
        /// </summary>
        /// <value>API Client ID from brokerage when registering app</value>
        [DataMember(Name = "brokerageAPIClientId", EmitDefaultValue = true)]
        public Object BrokerageAPIClientId { get; set; }

        /// <summary>
        /// API Client Secret from brokerage when registering app
        /// </summary>
        /// <value>API Client Secret from brokerage when registering app</value>
        [DataMember(Name = "brokerageAPIClientSecret", EmitDefaultValue = true)]
        public Object BrokerageAPIClientSecret { get; set; }

        /// <summary>
        /// Redirect uri from brokerage when registering app
        /// </summary>
        /// <value>Redirect uri from brokerage when registering app</value>
        [DataMember(Name = "redirectURI", EmitDefaultValue = true)]
        public Object RedirectURI { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateSnapTradeParterApiCredentialsRequest {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BrokerageAuthorizationTypeId: ").Append(BrokerageAuthorizationTypeId).Append("\n");
            sb.Append("  BrokerageAPIClientId: ").Append(BrokerageAPIClientId).Append("\n");
            sb.Append("  BrokerageAPIClientSecret: ").Append(BrokerageAPIClientSecret).Append("\n");
            sb.Append("  RedirectURI: ").Append(RedirectURI).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSnapTradeParterApiCredentialsRequest);
        }

        /// <summary>
        /// Returns true if CreateSnapTradeParterApiCredentialsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSnapTradeParterApiCredentialsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSnapTradeParterApiCredentialsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.BrokerageAuthorizationTypeId == input.BrokerageAuthorizationTypeId ||
                    (this.BrokerageAuthorizationTypeId != null &&
                    this.BrokerageAuthorizationTypeId.Equals(input.BrokerageAuthorizationTypeId))
                ) && base.Equals(input) && 
                (
                    this.BrokerageAPIClientId == input.BrokerageAPIClientId ||
                    (this.BrokerageAPIClientId != null &&
                    this.BrokerageAPIClientId.Equals(input.BrokerageAPIClientId))
                ) && base.Equals(input) && 
                (
                    this.BrokerageAPIClientSecret == input.BrokerageAPIClientSecret ||
                    (this.BrokerageAPIClientSecret != null &&
                    this.BrokerageAPIClientSecret.Equals(input.BrokerageAPIClientSecret))
                ) && base.Equals(input) && 
                (
                    this.RedirectURI == input.RedirectURI ||
                    (this.RedirectURI != null &&
                    this.RedirectURI.Equals(input.RedirectURI))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BrokerageAuthorizationTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.BrokerageAuthorizationTypeId.GetHashCode();
                }
                if (this.BrokerageAPIClientId != null)
                {
                    hashCode = (hashCode * 59) + this.BrokerageAPIClientId.GetHashCode();
                }
                if (this.BrokerageAPIClientSecret != null)
                {
                    hashCode = (hashCode * 59) + this.BrokerageAPIClientSecret.GetHashCode();
                }
                if (this.RedirectURI != null)
                {
                    hashCode = (hashCode * 59) + this.RedirectURI.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
