/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SnapTrade.Net.Client;
using SnapTrade.Net.Api;
// uncomment below to import models
//using SnapTrade.Net.Model;

namespace SnapTrade.Net.Test.Api
{
    /// <summary>
    ///  Class for testing ReferenceDataApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Konfig (https://konfigthis.com).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ReferenceDataApiTests : IDisposable
    {
        private ReferenceDataApi instance;

        public ReferenceDataApiTests()
        {
            instance = new ReferenceDataApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ReferenceDataApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ReferenceDataApi
            //Assert.IsType<ReferenceDataApi>(instance);
        }

        /// <summary>
        /// Test GetCurrencyExchangeRatePair
        /// </summary>
        [Fact]
        public void GetCurrencyExchangeRatePairTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string currencyPair = null;
            //var response = instance.GetCurrencyExchangeRatePair(currencyPair);
            //Assert.IsType<ExchangeRatePairs>(response);
        }

        /// <summary>
        /// Test GetPartnerInfo
        /// </summary>
        [Fact]
        public void GetPartnerInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPartnerInfo();
            //Assert.IsType<PartnerData>(response);
        }

        /// <summary>
        /// Test GetSecurityTypes
        /// </summary>
        [Fact]
        public void GetSecurityTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSecurityTypes();
            //Assert.IsType<List<SecurityType>>(response);
        }

        /// <summary>
        /// Test GetStockExchanges
        /// </summary>
        [Fact]
        public void GetStockExchangesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetStockExchanges();
            //Assert.IsType<List<Exchange>>(response);
        }

        /// <summary>
        /// Test GetSymbols
        /// </summary>
        [Fact]
        public void GetSymbolsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SymbolQuery symbolQuery = null;
            //var response = instance.GetSymbols(symbolQuery);
            //Assert.IsType<List<UniversalSymbol>>(response);
        }

        /// <summary>
        /// Test GetSymbolsByTicker
        /// </summary>
        [Fact]
        public void GetSymbolsByTickerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid ticker = null;
            //Guid? symbolId = null;
            //var response = instance.GetSymbolsByTicker(ticker, symbolId);
            //Assert.IsType<UniversalSymbol>(response);
        }

        /// <summary>
        /// Test ListAllBrokerageAuthorizationType
        /// </summary>
        [Fact]
        public void ListAllBrokerageAuthorizationTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brokerage = null;
            //var response = instance.ListAllBrokerageAuthorizationType(brokerage);
            //Assert.IsType<List<BrokerageAuthorizationTypeReadOnly>>(response);
        }

        /// <summary>
        /// Test ListAllBrokerages
        /// </summary>
        [Fact]
        public void ListAllBrokeragesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListAllBrokerages();
            //Assert.IsType<List<Brokerage>>(response);
        }

        /// <summary>
        /// Test ListAllCurrencies
        /// </summary>
        [Fact]
        public void ListAllCurrenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListAllCurrencies();
            //Assert.IsType<List<Currency>>(response);
        }

        /// <summary>
        /// Test ListAllCurrenciesRates
        /// </summary>
        [Fact]
        public void ListAllCurrenciesRatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListAllCurrenciesRates();
            //Assert.IsType<List<ExchangeRatePairs>>(response);
        }

        /// <summary>
        /// Test SymbolSearchUserAccount
        /// </summary>
        [Fact]
        public void SymbolSearchUserAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string userSecret = null;
            //Guid accountId = null;
            //SymbolQuery symbolQuery = null;
            //var response = instance.SymbolSearchUserAccount(userId, userSecret, accountId, symbolQuery);
            //Assert.IsType<List<UniversalSymbol>>(response);
        }
    }
}
