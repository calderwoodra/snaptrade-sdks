/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SnapTrade.Net.Client;
using SnapTrade.Net.Api;
// uncomment below to import models
//using SnapTrade.Net.Model;

namespace SnapTrade.Net.Test.Api
{
    /// <summary>
    ///  Class for testing TradingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Konfig (https://konfigthis.com).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TradingApiTests : IDisposable
    {
        private TradingApi instance;

        public TradingApiTests()
        {
            instance = new TradingApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TradingApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TradingApi
            //Assert.IsType<TradingApi>(instance);
        }

        /// <summary>
        /// Test CancelUserAccountOrder
        /// </summary>
        [Fact]
        public void CancelUserAccountOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string userSecret = null;
            //Guid accountId = null;
            //TradingCancelUserAccountOrderRequest tradingCancelUserAccountOrderRequest = null;
            //var response = instance.CancelUserAccountOrder(userId, userSecret, accountId, tradingCancelUserAccountOrderRequest);
            //Assert.IsType<AccountOrderRecord>(response);
        }

        /// <summary>
        /// Test GetCalculatedTradeImpactById
        /// </summary>
        [Fact]
        public void GetCalculatedTradeImpactByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid portfolioGroupId = null;
            //Guid calculatedTradeId = null;
            //Guid tradeId = null;
            //var response = instance.GetCalculatedTradeImpactById(portfolioGroupId, calculatedTradeId, tradeId);
            //Assert.IsType<Trade>(response);
        }

        /// <summary>
        /// Test GetCalculatedTradesImpact
        /// </summary>
        [Fact]
        public void GetCalculatedTradesImpactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid portfolioGroupId = null;
            //Guid calculatedTradeId = null;
            //var response = instance.GetCalculatedTradesImpact(portfolioGroupId, calculatedTradeId);
            //Assert.IsType<List<TradeImpact>>(response);
        }

        /// <summary>
        /// Test GetOrderImpact
        /// </summary>
        [Fact]
        public void GetOrderImpactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string userSecret = null;
            //ManualTradeForm manualTradeForm = null;
            //var response = instance.GetOrderImpact(userId, userSecret, manualTradeForm);
            //Assert.IsType<ManualTradeAndImpact>(response);
        }

        /// <summary>
        /// Test GetUserAccountQuotes
        /// </summary>
        [Fact]
        public void GetUserAccountQuotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string userSecret = null;
            //string symbols = null;
            //Guid accountId = null;
            //bool? useTicker = null;
            //var response = instance.GetUserAccountQuotes(userId, userSecret, symbols, accountId, useTicker);
            //Assert.IsType<SymbolsQuotes>(response);
        }

        /// <summary>
        /// Test ModifyCalculatedTradeById
        /// </summary>
        [Fact]
        public void ModifyCalculatedTradeByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid portfolioGroupId = null;
            //Guid calculatedTradeId = null;
            //Guid tradeId = null;
            //Trade trade = null;
            //var response = instance.ModifyCalculatedTradeById(portfolioGroupId, calculatedTradeId, tradeId, trade);
            //Assert.IsType<Trade>(response);
        }

        /// <summary>
        /// Test PlaceCalculatedTrades
        /// </summary>
        [Fact]
        public void PlaceCalculatedTradesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid portfolioGroupId = null;
            //Guid calculatedTradeId = null;
            //var response = instance.PlaceCalculatedTrades(portfolioGroupId, calculatedTradeId);
            //Assert.IsType<List<TradeExecutionStatus>>(response);
        }

        /// <summary>
        /// Test PlaceForceOrder
        /// </summary>
        [Fact]
        public void PlaceForceOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string userSecret = null;
            //ManualTradeForm manualTradeForm = null;
            //var response = instance.PlaceForceOrder(userId, userSecret, manualTradeForm);
            //Assert.IsType<AccountOrderRecord>(response);
        }

        /// <summary>
        /// Test PlaceOCOOrder
        /// </summary>
        [Fact]
        public void PlaceOCOOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string userSecret = null;
            //TradingPlaceOCOOrderRequest tradingPlaceOCOOrderRequest = null;
            //var response = instance.PlaceOCOOrder(userId, userSecret, tradingPlaceOCOOrderRequest);
            //Assert.IsType<AccountOrderRecord>(response);
        }

        /// <summary>
        /// Test PlaceOrder
        /// </summary>
        [Fact]
        public void PlaceOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid tradeId = null;
            //string userId = null;
            //string userSecret = null;
            //var response = instance.PlaceOrder(tradeId, userId, userSecret);
            //Assert.IsType<AccountOrderRecord>(response);
        }
    }
}
