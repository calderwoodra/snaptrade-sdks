/* tslint:disable */
/* eslint-disable */
/**
 * SnapTrade
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Account } from '../models';
// @ts-ignore
import { Balance } from '../models';
// @ts-ignore
import { CalculatedTrade } from '../models';
// @ts-ignore
import { ExcludedAsset } from '../models';
// @ts-ignore
import { ModelAssetClassDetails } from '../models';
// @ts-ignore
import { ModelPortfolioDetails } from '../models';
// @ts-ignore
import { PortfolioGroup } from '../models';
// @ts-ignore
import { PortfolioGroupInfo } from '../models';
// @ts-ignore
import { PortfolioGroupPosition } from '../models';
// @ts-ignore
import { PortfolioGroupSettings } from '../models';
// @ts-ignore
import { SymbolQuery } from '../models';
// @ts-ignore
import { TargetAsset } from '../models';
// @ts-ignore
import { Trade } from '../models';
// @ts-ignore
import { UniversalSymbol } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PortfolioManagementApi - axios parameter creator
 * @export
 */
export const PortfolioManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Adds an asset to exclude to a portfolio group
         * @param {string} portfolioGroupId The ID of the PortfolioGroup under which to exclude an asset.
         * @param {UniversalSymbol} [universalSymbol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPortfolioExcludedAsset: async (portfolioGroupId: string, universalSymbol?: UniversalSymbol, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('addPortfolioExcludedAsset', 'portfolioGroupId', portfolioGroupId)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}/excludedassets`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(universalSymbol, localVarRequestOptions, configuration)

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new portfolio group
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {{ [key: string]: any; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (userId: string, userSecret: string, requestBody: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('create', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('create', 'userSecret', userSecret)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('create', 'requestBody', requestBody)
            const localVarPath = `/portfolioGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new model asset class
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetClass: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/modelAssetClass`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new model portfolio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelPortfolio: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/modelPortfolio`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a model asset class
         * @param {string} modelAssetClassId The ID of the model asset class to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssetClass: async (modelAssetClassId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelAssetClassId' is not null or undefined
            assertParamExists('deleteAssetClass', 'modelAssetClassId', modelAssetClassId)
            const localVarPath = `/modelAssetClass/{modelAssetClassId}`
                .replace(`{${"modelAssetClassId"}}`, encodeURIComponent(String(modelAssetClassId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unexclude an asset from a portfolio group
         * @param {string} portfolioGroupId The ID of the PortfolioGroup under which to unexclude an asset.
         * @param {string} symbolId The ID of the excluded asset Symbol to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExcludedAsset: async (portfolioGroupId: string, symbolId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('deleteExcludedAsset', 'portfolioGroupId', portfolioGroupId)
            // verify required parameter 'symbolId' is not null or undefined
            assertParamExists('deleteExcludedAsset', 'symbolId', symbolId)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}/excludedassets/{symbolId}`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)))
                .replace(`{${"symbolId"}}`, encodeURIComponent(String(symbolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a model portfolio
         * @param {string} modelPortfolioId The ID of the model portfolio to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelPortfolioById: async (modelPortfolioId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelPortfolioId' is not null or undefined
            assertParamExists('deleteModelPortfolioById', 'modelPortfolioId', modelPortfolioId)
            const localVarPath = `/modelPortfolio/{modelPortfolioId}`
                .replace(`{${"modelPortfolioId"}}`, encodeURIComponent(String(modelPortfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a target portfolio.
         * @param {string} portfolioGroupId The ID of the PortfolioGroup to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePortfoli: async (portfolioGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('deletePortfoli', 'portfolioGroupId', portfolioGroupId)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a TargetAsset.
         * @param {string} portfolioGroupId The ID of the PortfolioGroup under which to remove the target asset.
         * @param {string} targetAssetId The ID of the TargetAsset to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePortfolioTargetById: async (portfolioGroupId: string, targetAssetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('deletePortfolioTargetById', 'portfolioGroupId', portfolioGroupId)
            // verify required parameter 'targetAssetId' is not null or undefined
            assertParamExists('deletePortfolioTargetById', 'targetAssetId', targetAssetId)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}/targets/{targetAssetId}`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)))
                .replace(`{${"targetAssetId"}}`, encodeURIComponent(String(targetAssetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get details of a model asset class
         * @param {string} modelAssetClassId The ID of the model asset class to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailAssetClass: async (modelAssetClassId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelAssetClassId' is not null or undefined
            assertParamExists('detailAssetClass', 'modelAssetClassId', modelAssetClassId)
            const localVarPath = `/modelAssetClass/{modelAssetClassId}`
                .replace(`{${"modelAssetClassId"}}`, encodeURIComponent(String(modelAssetClassId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return an individual trade
         * @param {string} portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations
         * @param {string} calculatedTradeId The ID of calculated trade to get account impact
         * @param {string} tradeId The ID of trade object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCalculatedTradeById: async (portfolioGroupId: string, calculatedTradeId: string, tradeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('getCalculatedTradeById', 'portfolioGroupId', portfolioGroupId)
            // verify required parameter 'calculatedTradeId' is not null or undefined
            assertParamExists('getCalculatedTradeById', 'calculatedTradeId', calculatedTradeId)
            // verify required parameter 'tradeId' is not null or undefined
            assertParamExists('getCalculatedTradeById', 'tradeId', tradeId)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}/calculatedtrades/{calculatedTradeId}/{TradeId}`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)))
                .replace(`{${"calculatedTradeId"}}`, encodeURIComponent(String(calculatedTradeId)))
                .replace(`{${"TradeId"}}`, encodeURIComponent(String(tradeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get details of a model portfolio
         * @param {string} modelPortfolioId The ID of the model portfolio to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelDetailsById: async (modelPortfolioId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelPortfolioId' is not null or undefined
            assertParamExists('getModelDetailsById', 'modelPortfolioId', modelPortfolioId)
            const localVarPath = `/modelPortfolio/{modelPortfolioId}`
                .replace(`{${"modelPortfolioId"}}`, encodeURIComponent(String(modelPortfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get sum of cash balances in portfolio group
         * @param {string} portfolioGroupId The ID of the PortfolioGroup under which to create the target asset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioBalances: async (portfolioGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('getPortfolioBalances', 'portfolioGroupId', portfolioGroupId)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}/balances`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get details of a target portfolio
         * @param {string} portfolioGroupId The ID of the PortfolioGroup to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioDetailsById: async (portfolioGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('getPortfolioDetailsById', 'portfolioGroupId', portfolioGroupId)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return a whole bunch of relevant information relating to a portfolio group.
         * @param {string} portfolioGroupId The ID of the PortfolioGroup under which to create the target asset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioInfo: async (portfolioGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('getPortfolioInfo', 'portfolioGroupId', portfolioGroupId)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}/info`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get total of each postions owned in portfolio group
         * @param {string} portfolioGroupId The ID of the PortfolioGroup under which to create the target asset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioPositions: async (portfolioGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('getPortfolioPositions', 'portfolioGroupId', portfolioGroupId)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}/positions`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get portfolio group settings
         * @param {string} portfolioGroupId The ID of the PortfolioGroup under which to get the settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioSettings: async (portfolioGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('getPortfolioSettings', 'portfolioGroupId', portfolioGroupId)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}/settings`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific target from a portfolio group
         * @param {string} portfolioGroupId The ID of the PortfolioGroup under which to get the target asset.
         * @param {string} targetAssetId The ID of the TargetAsset to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioTargetById: async (portfolioGroupId: string, targetAssetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('getPortfolioTargetById', 'portfolioGroupId', portfolioGroupId)
            // verify required parameter 'targetAssetId' is not null or undefined
            assertParamExists('getPortfolioTargetById', 'targetAssetId', targetAssetId)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}/targets/{targetAssetId}`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)))
                .replace(`{${"targetAssetId"}}`, encodeURIComponent(String(targetAssetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all target assets under the specified PortfolioGroup.
         * @param {string} portfolioGroupId The ID of the PortfolioGroup under which to create the target asset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioTargets: async (portfolioGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('getPortfolioTargets', 'portfolioGroupId', portfolioGroupId)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}/targets`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an array of excluded assets associated with a portfolio group\\
         * @param {string} portfolioGroupId The ID of the PortfolioGroup under which the excluded assets are linked.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortoflioExcludedAssets: async (portfolioGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('getPortoflioExcludedAssets', 'portfolioGroupId', portfolioGroupId)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}/excludedassets`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Import target allocation based on portfolio group
         * @param {string} portfolioGroupId The ID of the PortfolioGroup under which to create the target asset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importModelPortfolio: async (portfolioGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('importModelPortfolio', 'portfolioGroupId', portfolioGroupId)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}/import`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all portfolio groups
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (userId: string, userSecret: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('list', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('list', 'userSecret', userSecret)
            const localVarPath = `/portfolioGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of model asset class
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssetClasses: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/modelAssetClass`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of trades to make to rebalance portfolio group
         * @param {string} portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCalculatedTrades: async (portfolioGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('listCalculatedTrades', 'portfolioGroupId', portfolioGroupId)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}/calculatedtrades`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of model portfolio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelPortfolio: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/modelPortfolio`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all accounts associated with a portfolio group
         * @param {string} portfolioGroupId The ID of the PortfolioGroup under which the accounts are linked.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPortfolioAccounts: async (portfolioGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('listPortfolioAccounts', 'portfolioGroupId', portfolioGroupId)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}/accounts`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates model portfolio object
         * @param {string} modelPortfolioId The ID of the model portfolio to update.
         * @param {ModelPortfolioDetails} modelPortfolioDetails Use this endpoint change model asset class name and to add or remove a model portfolio security/model portfolio asset class. &lt;br /&gt;&lt;br /&gt; * The model portfolio name and model portfolio model type is required. &lt;br /&gt; * The model portfolio model type must be either 0 or 1. [0 -&gt; Securities based, 1 -&gt; Asset Class based] &lt;br /&gt;&lt;br /&gt; * If the model portfolio type is 0, the model portfolio asset class must be an empty array. &lt;br /&gt; * If the model portfolio type is 1, the model portfolio security must be an empty array. &lt;br /&gt;&lt;br /&gt; * When updating the model portfolio security, the percent is required. Only the symbol id is required for the symbol object &lt;br /&gt; * When updating the model portfolio asset classes, the percent is required. Only the model asset class id is required for the model asset class object &lt;br /&gt;&lt;br /&gt; * To remove all model portfolio securities or model portfolio asset class, set then to an empty array
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyModelPortfolioById: async (modelPortfolioId: string, modelPortfolioDetails: ModelPortfolioDetails, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelPortfolioId' is not null or undefined
            assertParamExists('modifyModelPortfolioById', 'modelPortfolioId', modelPortfolioId)
            // verify required parameter 'modelPortfolioDetails' is not null or undefined
            assertParamExists('modifyModelPortfolioById', 'modelPortfolioDetails', modelPortfolioDetails)
            const localVarPath = `/modelPortfolio/{modelPortfolioId}`
                .replace(`{${"modelPortfolioId"}}`, encodeURIComponent(String(modelPortfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelPortfolioDetails, localVarRequestOptions, configuration)

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing target portfolio.
         * @param {string} portfolioGroupId The ID of the PortfolioGroup to update.
         * @param {{ [key: string]: any; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        savePortfolio: async (portfolioGroupId: string, requestBody: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('savePortfolio', 'portfolioGroupId', portfolioGroupId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('savePortfolio', 'requestBody', requestBody)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search for symbols limited to brokerages under the specified portfolio group
         * @param {string} portfolioGroupId The ID of the PortfolioGroup to search under
         * @param {SymbolQuery} [symbolQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPortfolioSymbols: async (portfolioGroupId: string, symbolQuery?: SymbolQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('searchPortfolioSymbols', 'portfolioGroupId', portfolioGroupId)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}/symbols`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(symbolQuery, localVarRequestOptions, configuration)

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set a new list of target assets under the specified PortfolioGroup. All existing target assets under this portfolio group will be replaced with the new list.
         * @param {string} portfolioGroupId The ID of the PortfolioGroup under which to create the target asset.
         * @param {Array<TargetAsset>} [targetAsset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPortfolioTargets: async (portfolioGroupId: string, targetAsset?: Array<TargetAsset>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('setPortfolioTargets', 'portfolioGroupId', portfolioGroupId)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}/targets`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(targetAsset, localVarRequestOptions, configuration)

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates model asset class objects
         * @param {string} modelAssetClassId The ID of the model asset class to update.
         * @param {ModelAssetClassDetails} modelAssetClassDetails Use this endpoint change model asset class name and to add or remove a model asset class target. &lt;br /&gt;&lt;br /&gt; * Only the model asset class name is required for the model asset class object. &lt;br /&gt; * Only the symbol id is required for the symbol object in the model asset class target object. &lt;br /&gt; * To remove all model asset class targets, set the model asset class target as an empty array
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAssetClass: async (modelAssetClassId: string, modelAssetClassDetails: ModelAssetClassDetails, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelAssetClassId' is not null or undefined
            assertParamExists('updateAssetClass', 'modelAssetClassId', modelAssetClassId)
            // verify required parameter 'modelAssetClassDetails' is not null or undefined
            assertParamExists('updateAssetClass', 'modelAssetClassDetails', modelAssetClassDetails)
            const localVarPath = `/modelAssetClass/{modelAssetClassId}`
                .replace(`{${"modelAssetClassId"}}`, encodeURIComponent(String(modelAssetClassId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelAssetClassDetails, localVarRequestOptions, configuration)

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates portfolio group settings
         * @param {string} portfolioGroupId The ID of the PortfolioGroup under which to patch the settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePortfolioSettings: async (portfolioGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('updatePortfolioSettings', 'portfolioGroupId', portfolioGroupId)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}/settings`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a TargetAsset under the specified PortfolioGroup.
         * @param {string} portfolioGroupId The ID of the PortfolioGroup under which to patch the target asset.
         * @param {string} targetAssetId The ID of the TargetAsset to patch.
         * @param {TargetAsset} targetAsset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePortfolioTargetById: async (portfolioGroupId: string, targetAssetId: string, targetAsset: TargetAsset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGroupId' is not null or undefined
            assertParamExists('updatePortfolioTargetById', 'portfolioGroupId', portfolioGroupId)
            // verify required parameter 'targetAssetId' is not null or undefined
            assertParamExists('updatePortfolioTargetById', 'targetAssetId', targetAssetId)
            // verify required parameter 'targetAsset' is not null or undefined
            assertParamExists('updatePortfolioTargetById', 'targetAsset', targetAsset)
            const localVarPath = `/portfolioGroups/{portfolioGroupId}/targets/{targetAssetId}`
                .replace(`{${"portfolioGroupId"}}`, encodeURIComponent(String(portfolioGroupId)))
                .replace(`{${"targetAssetId"}}`, encodeURIComponent(String(targetAssetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})

            // authentication PartnerSignature required
            await setApiKeyToObject({object: localVarHeaderParameter, keyParamName: "Signature", configuration})

            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(targetAsset, localVarRequestOptions, configuration)

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PortfolioManagementApi - functional programming interface
 * @export
 */
export const PortfolioManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PortfolioManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Adds an asset to exclude to a portfolio group
         * @param {PortfolioManagementApiAddPortfolioExcludedAssetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPortfolioExcludedAsset(requestParameters: PortfolioManagementApiAddPortfolioExcludedAssetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExcludedAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPortfolioExcludedAsset(requestParameters.portfolioGroupId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new portfolio group
         * @param {PortfolioManagementApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(requestParameters: PortfolioManagementApiCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PortfolioGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(requestParameters.userId, requestParameters.userSecret, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new model asset class
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssetClass(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelAssetClassDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssetClass(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new model portfolio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createModelPortfolio(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPortfolioDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createModelPortfolio(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a model asset class
         * @param {PortfolioManagementApiDeleteAssetClassRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAssetClass(requestParameters: PortfolioManagementApiDeleteAssetClassRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAssetClass(requestParameters.modelAssetClassId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Unexclude an asset from a portfolio group
         * @param {PortfolioManagementApiDeleteExcludedAssetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExcludedAsset(requestParameters: PortfolioManagementApiDeleteExcludedAssetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExcludedAsset(requestParameters.portfolioGroupId, requestParameters.symbolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a model portfolio
         * @param {PortfolioManagementApiDeleteModelPortfolioByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteModelPortfolioById(requestParameters: PortfolioManagementApiDeleteModelPortfolioByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteModelPortfolioById(requestParameters.modelPortfolioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove a target portfolio.
         * @param {PortfolioManagementApiDeletePortfoliRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePortfoli(requestParameters: PortfolioManagementApiDeletePortfoliRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePortfoli(requestParameters.portfolioGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove a TargetAsset.
         * @param {PortfolioManagementApiDeletePortfolioTargetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePortfolioTargetById(requestParameters: PortfolioManagementApiDeletePortfolioTargetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePortfolioTargetById(requestParameters.portfolioGroupId, requestParameters.targetAssetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get details of a model asset class
         * @param {PortfolioManagementApiDetailAssetClassRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detailAssetClass(requestParameters: PortfolioManagementApiDetailAssetClassRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelAssetClassDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detailAssetClass(requestParameters.modelAssetClassId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return an individual trade
         * @param {PortfolioManagementApiGetCalculatedTradeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCalculatedTradeById(requestParameters: PortfolioManagementApiGetCalculatedTradeByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Trade>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCalculatedTradeById(requestParameters.portfolioGroupId, requestParameters.calculatedTradeId, requestParameters.tradeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get details of a model portfolio
         * @param {PortfolioManagementApiGetModelDetailsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModelDetailsById(requestParameters: PortfolioManagementApiGetModelDetailsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPortfolioDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getModelDetailsById(requestParameters.modelPortfolioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get sum of cash balances in portfolio group
         * @param {PortfolioManagementApiGetPortfolioBalancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolioBalances(requestParameters: PortfolioManagementApiGetPortfolioBalancesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Balance>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolioBalances(requestParameters.portfolioGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get details of a target portfolio
         * @param {PortfolioManagementApiGetPortfolioDetailsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolioDetailsById(requestParameters: PortfolioManagementApiGetPortfolioDetailsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolioDetailsById(requestParameters.portfolioGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return a whole bunch of relevant information relating to a portfolio group.
         * @param {PortfolioManagementApiGetPortfolioInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolioInfo(requestParameters: PortfolioManagementApiGetPortfolioInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioGroupInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolioInfo(requestParameters.portfolioGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get total of each postions owned in portfolio group
         * @param {PortfolioManagementApiGetPortfolioPositionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolioPositions(requestParameters: PortfolioManagementApiGetPortfolioPositionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PortfolioGroupPosition>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolioPositions(requestParameters.portfolioGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get portfolio group settings
         * @param {PortfolioManagementApiGetPortfolioSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolioSettings(requestParameters: PortfolioManagementApiGetPortfolioSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioGroupSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolioSettings(requestParameters.portfolioGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a specific target from a portfolio group
         * @param {PortfolioManagementApiGetPortfolioTargetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolioTargetById(requestParameters: PortfolioManagementApiGetPortfolioTargetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolioTargetById(requestParameters.portfolioGroupId, requestParameters.targetAssetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all target assets under the specified PortfolioGroup.
         * @param {PortfolioManagementApiGetPortfolioTargetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolioTargets(requestParameters: PortfolioManagementApiGetPortfolioTargetsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetAsset>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolioTargets(requestParameters.portfolioGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an array of excluded assets associated with a portfolio group\\
         * @param {PortfolioManagementApiGetPortoflioExcludedAssetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortoflioExcludedAssets(requestParameters: PortfolioManagementApiGetPortoflioExcludedAssetsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExcludedAsset>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortoflioExcludedAssets(requestParameters.portfolioGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Import target allocation based on portfolio group
         * @param {PortfolioManagementApiImportModelPortfolioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importModelPortfolio(requestParameters: PortfolioManagementApiImportModelPortfolioRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetAsset>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importModelPortfolio(requestParameters.portfolioGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all portfolio groups
         * @param {PortfolioManagementApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: PortfolioManagementApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PortfolioGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.userId, requestParameters.userSecret, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List of model asset class
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssetClasses(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelAssetClassDetails>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssetClasses(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List of trades to make to rebalance portfolio group
         * @param {PortfolioManagementApiListCalculatedTradesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCalculatedTrades(requestParameters: PortfolioManagementApiListCalculatedTradesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalculatedTrade>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCalculatedTrades(requestParameters.portfolioGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List of model portfolio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelPortfolio(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelPortfolioDetails>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelPortfolio(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all accounts associated with a portfolio group
         * @param {PortfolioManagementApiListPortfolioAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPortfolioAccounts(requestParameters: PortfolioManagementApiListPortfolioAccountsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPortfolioAccounts(requestParameters.portfolioGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates model portfolio object
         * @param {PortfolioManagementApiModifyModelPortfolioByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyModelPortfolioById(requestParameters: PortfolioManagementApiModifyModelPortfolioByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyModelPortfolioById(requestParameters.modelPortfolioId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing target portfolio.
         * @param {PortfolioManagementApiSavePortfolioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async savePortfolio(requestParameters: PortfolioManagementApiSavePortfolioRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.savePortfolio(requestParameters.portfolioGroupId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search for symbols limited to brokerages under the specified portfolio group
         * @param {PortfolioManagementApiSearchPortfolioSymbolsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchPortfolioSymbols(requestParameters: PortfolioManagementApiSearchPortfolioSymbolsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UniversalSymbol>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchPortfolioSymbols(requestParameters.portfolioGroupId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set a new list of target assets under the specified PortfolioGroup. All existing target assets under this portfolio group will be replaced with the new list.
         * @param {PortfolioManagementApiSetPortfolioTargetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setPortfolioTargets(requestParameters: PortfolioManagementApiSetPortfolioTargetsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetAsset>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setPortfolioTargets(requestParameters.portfolioGroupId, requestParameters.requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates model asset class objects
         * @param {PortfolioManagementApiUpdateAssetClassRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAssetClass(requestParameters: PortfolioManagementApiUpdateAssetClassRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAssetClass(requestParameters.modelAssetClassId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates portfolio group settings
         * @param {PortfolioManagementApiUpdatePortfolioSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePortfolioSettings(requestParameters: PortfolioManagementApiUpdatePortfolioSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioGroupSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePortfolioSettings(requestParameters.portfolioGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a TargetAsset under the specified PortfolioGroup.
         * @param {PortfolioManagementApiUpdatePortfolioTargetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePortfolioTargetById(requestParameters: PortfolioManagementApiUpdatePortfolioTargetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePortfolioTargetById(requestParameters.portfolioGroupId, requestParameters.targetAssetId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PortfolioManagementApi - factory interface
 * @export
 */
export const PortfolioManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PortfolioManagementApiFp(configuration)
    return {
        /**
         * 
         * @summary Adds an asset to exclude to a portfolio group
         * @param {PortfolioManagementApiAddPortfolioExcludedAssetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPortfolioExcludedAsset(requestParameters: PortfolioManagementApiAddPortfolioExcludedAssetRequest, options?: AxiosRequestConfig): AxiosPromise<ExcludedAsset> {
            return localVarFp.addPortfolioExcludedAsset(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new portfolio group
         * @param {PortfolioManagementApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: PortfolioManagementApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PortfolioGroup>> {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new model asset class
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetClass(options?: AxiosRequestConfig): AxiosPromise<ModelAssetClassDetails> {
            return localVarFp.createAssetClass(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new model portfolio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelPortfolio(options?: AxiosRequestConfig): AxiosPromise<ModelPortfolioDetails> {
            return localVarFp.createModelPortfolio(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a model asset class
         * @param {PortfolioManagementApiDeleteAssetClassRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssetClass(requestParameters: PortfolioManagementApiDeleteAssetClassRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAssetClass(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unexclude an asset from a portfolio group
         * @param {PortfolioManagementApiDeleteExcludedAssetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExcludedAsset(requestParameters: PortfolioManagementApiDeleteExcludedAssetRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteExcludedAsset(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a model portfolio
         * @param {PortfolioManagementApiDeleteModelPortfolioByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelPortfolioById(requestParameters: PortfolioManagementApiDeleteModelPortfolioByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteModelPortfolioById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a target portfolio.
         * @param {PortfolioManagementApiDeletePortfoliRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePortfoli(requestParameters: PortfolioManagementApiDeletePortfoliRequest, options?: AxiosRequestConfig): AxiosPromise<PortfolioGroup> {
            return localVarFp.deletePortfoli(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a TargetAsset.
         * @param {PortfolioManagementApiDeletePortfolioTargetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePortfolioTargetById(requestParameters: PortfolioManagementApiDeletePortfolioTargetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<TargetAsset> {
            return localVarFp.deletePortfolioTargetById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get details of a model asset class
         * @param {PortfolioManagementApiDetailAssetClassRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailAssetClass(requestParameters: PortfolioManagementApiDetailAssetClassRequest, options?: AxiosRequestConfig): AxiosPromise<ModelAssetClassDetails> {
            return localVarFp.detailAssetClass(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return an individual trade
         * @param {PortfolioManagementApiGetCalculatedTradeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCalculatedTradeById(requestParameters: PortfolioManagementApiGetCalculatedTradeByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Trade>> {
            return localVarFp.getCalculatedTradeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get details of a model portfolio
         * @param {PortfolioManagementApiGetModelDetailsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelDetailsById(requestParameters: PortfolioManagementApiGetModelDetailsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ModelPortfolioDetails> {
            return localVarFp.getModelDetailsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get sum of cash balances in portfolio group
         * @param {PortfolioManagementApiGetPortfolioBalancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioBalances(requestParameters: PortfolioManagementApiGetPortfolioBalancesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Balance>> {
            return localVarFp.getPortfolioBalances(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get details of a target portfolio
         * @param {PortfolioManagementApiGetPortfolioDetailsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioDetailsById(requestParameters: PortfolioManagementApiGetPortfolioDetailsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<PortfolioGroup> {
            return localVarFp.getPortfolioDetailsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return a whole bunch of relevant information relating to a portfolio group.
         * @param {PortfolioManagementApiGetPortfolioInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioInfo(requestParameters: PortfolioManagementApiGetPortfolioInfoRequest, options?: AxiosRequestConfig): AxiosPromise<PortfolioGroupInfo> {
            return localVarFp.getPortfolioInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get total of each postions owned in portfolio group
         * @param {PortfolioManagementApiGetPortfolioPositionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioPositions(requestParameters: PortfolioManagementApiGetPortfolioPositionsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PortfolioGroupPosition>> {
            return localVarFp.getPortfolioPositions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get portfolio group settings
         * @param {PortfolioManagementApiGetPortfolioSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioSettings(requestParameters: PortfolioManagementApiGetPortfolioSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<PortfolioGroupSettings> {
            return localVarFp.getPortfolioSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific target from a portfolio group
         * @param {PortfolioManagementApiGetPortfolioTargetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioTargetById(requestParameters: PortfolioManagementApiGetPortfolioTargetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<TargetAsset> {
            return localVarFp.getPortfolioTargetById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all target assets under the specified PortfolioGroup.
         * @param {PortfolioManagementApiGetPortfolioTargetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioTargets(requestParameters: PortfolioManagementApiGetPortfolioTargetsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<TargetAsset>> {
            return localVarFp.getPortfolioTargets(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an array of excluded assets associated with a portfolio group\\
         * @param {PortfolioManagementApiGetPortoflioExcludedAssetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortoflioExcludedAssets(requestParameters: PortfolioManagementApiGetPortoflioExcludedAssetsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ExcludedAsset>> {
            return localVarFp.getPortoflioExcludedAssets(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Import target allocation based on portfolio group
         * @param {PortfolioManagementApiImportModelPortfolioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importModelPortfolio(requestParameters: PortfolioManagementApiImportModelPortfolioRequest, options?: AxiosRequestConfig): AxiosPromise<Array<TargetAsset>> {
            return localVarFp.importModelPortfolio(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all portfolio groups
         * @param {PortfolioManagementApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: PortfolioManagementApiListRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PortfolioGroup>> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List of model asset class
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssetClasses(options?: AxiosRequestConfig): AxiosPromise<Array<ModelAssetClassDetails>> {
            return localVarFp.listAssetClasses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List of trades to make to rebalance portfolio group
         * @param {PortfolioManagementApiListCalculatedTradesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCalculatedTrades(requestParameters: PortfolioManagementApiListCalculatedTradesRequest, options?: AxiosRequestConfig): AxiosPromise<CalculatedTrade> {
            return localVarFp.listCalculatedTrades(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List of model portfolio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelPortfolio(options?: AxiosRequestConfig): AxiosPromise<Array<ModelPortfolioDetails>> {
            return localVarFp.listModelPortfolio(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all accounts associated with a portfolio group
         * @param {PortfolioManagementApiListPortfolioAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPortfolioAccounts(requestParameters: PortfolioManagementApiListPortfolioAccountsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Account>> {
            return localVarFp.listPortfolioAccounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates model portfolio object
         * @param {PortfolioManagementApiModifyModelPortfolioByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyModelPortfolioById(requestParameters: PortfolioManagementApiModifyModelPortfolioByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modifyModelPortfolioById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing target portfolio.
         * @param {PortfolioManagementApiSavePortfolioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        savePortfolio(requestParameters: PortfolioManagementApiSavePortfolioRequest, options?: AxiosRequestConfig): AxiosPromise<PortfolioGroup> {
            return localVarFp.savePortfolio(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search for symbols limited to brokerages under the specified portfolio group
         * @param {PortfolioManagementApiSearchPortfolioSymbolsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPortfolioSymbols(requestParameters: PortfolioManagementApiSearchPortfolioSymbolsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<UniversalSymbol>> {
            return localVarFp.searchPortfolioSymbols(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set a new list of target assets under the specified PortfolioGroup. All existing target assets under this portfolio group will be replaced with the new list.
         * @param {PortfolioManagementApiSetPortfolioTargetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPortfolioTargets(requestParameters: PortfolioManagementApiSetPortfolioTargetsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<TargetAsset>> {
            return localVarFp.setPortfolioTargets(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates model asset class objects
         * @param {PortfolioManagementApiUpdateAssetClassRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAssetClass(requestParameters: PortfolioManagementApiUpdateAssetClassRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateAssetClass(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates portfolio group settings
         * @param {PortfolioManagementApiUpdatePortfolioSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePortfolioSettings(requestParameters: PortfolioManagementApiUpdatePortfolioSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<PortfolioGroupSettings> {
            return localVarFp.updatePortfolioSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a TargetAsset under the specified PortfolioGroup.
         * @param {PortfolioManagementApiUpdatePortfolioTargetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePortfolioTargetById(requestParameters: PortfolioManagementApiUpdatePortfolioTargetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<TargetAsset> {
            return localVarFp.updatePortfolioTargetById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addPortfolioExcludedAsset operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiAddPortfolioExcludedAssetRequest
 */
export type PortfolioManagementApiAddPortfolioExcludedAssetRequest = {
    
    /**
    * The ID of the PortfolioGroup under which to exclude an asset.
    * @type {string}
    * @memberof PortfolioManagementApiAddPortfolioExcludedAsset
    */
    readonly portfolioGroupId: string
    
} & UniversalSymbol

/**
 * Request parameters for create operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiCreateRequest
 */
export type PortfolioManagementApiCreateRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PortfolioManagementApiCreate
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof PortfolioManagementApiCreate
    */
    readonly userSecret: string
    
} & { [key: string]: any; }

/**
 * Request parameters for deleteAssetClass operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiDeleteAssetClassRequest
 */
export type PortfolioManagementApiDeleteAssetClassRequest = {
    
    /**
    * The ID of the model asset class to delete.
    * @type {string}
    * @memberof PortfolioManagementApiDeleteAssetClass
    */
    readonly modelAssetClassId: string
    
}

/**
 * Request parameters for deleteExcludedAsset operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiDeleteExcludedAssetRequest
 */
export type PortfolioManagementApiDeleteExcludedAssetRequest = {
    
    /**
    * The ID of the PortfolioGroup under which to unexclude an asset.
    * @type {string}
    * @memberof PortfolioManagementApiDeleteExcludedAsset
    */
    readonly portfolioGroupId: string
    
    /**
    * The ID of the excluded asset Symbol to delete.
    * @type {string}
    * @memberof PortfolioManagementApiDeleteExcludedAsset
    */
    readonly symbolId: string
    
}

/**
 * Request parameters for deleteModelPortfolioById operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiDeleteModelPortfolioByIdRequest
 */
export type PortfolioManagementApiDeleteModelPortfolioByIdRequest = {
    
    /**
    * The ID of the model portfolio to delete.
    * @type {string}
    * @memberof PortfolioManagementApiDeleteModelPortfolioById
    */
    readonly modelPortfolioId: string
    
}

/**
 * Request parameters for deletePortfoli operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiDeletePortfoliRequest
 */
export type PortfolioManagementApiDeletePortfoliRequest = {
    
    /**
    * The ID of the PortfolioGroup to delete.
    * @type {string}
    * @memberof PortfolioManagementApiDeletePortfoli
    */
    readonly portfolioGroupId: string
    
}

/**
 * Request parameters for deletePortfolioTargetById operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiDeletePortfolioTargetByIdRequest
 */
export type PortfolioManagementApiDeletePortfolioTargetByIdRequest = {
    
    /**
    * The ID of the PortfolioGroup under which to remove the target asset.
    * @type {string}
    * @memberof PortfolioManagementApiDeletePortfolioTargetById
    */
    readonly portfolioGroupId: string
    
    /**
    * The ID of the TargetAsset to delete.
    * @type {string}
    * @memberof PortfolioManagementApiDeletePortfolioTargetById
    */
    readonly targetAssetId: string
    
}

/**
 * Request parameters for detailAssetClass operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiDetailAssetClassRequest
 */
export type PortfolioManagementApiDetailAssetClassRequest = {
    
    /**
    * The ID of the model asset class to get.
    * @type {string}
    * @memberof PortfolioManagementApiDetailAssetClass
    */
    readonly modelAssetClassId: string
    
}

/**
 * Request parameters for getCalculatedTradeById operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiGetCalculatedTradeByIdRequest
 */
export type PortfolioManagementApiGetCalculatedTradeByIdRequest = {
    
    /**
    * The ID of the PortfolioGroup to perform rebalancing calculations
    * @type {string}
    * @memberof PortfolioManagementApiGetCalculatedTradeById
    */
    readonly portfolioGroupId: string
    
    /**
    * The ID of calculated trade to get account impact
    * @type {string}
    * @memberof PortfolioManagementApiGetCalculatedTradeById
    */
    readonly calculatedTradeId: string
    
    /**
    * The ID of trade object
    * @type {string}
    * @memberof PortfolioManagementApiGetCalculatedTradeById
    */
    readonly tradeId: string
    
}

/**
 * Request parameters for getModelDetailsById operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiGetModelDetailsByIdRequest
 */
export type PortfolioManagementApiGetModelDetailsByIdRequest = {
    
    /**
    * The ID of the model portfolio to get.
    * @type {string}
    * @memberof PortfolioManagementApiGetModelDetailsById
    */
    readonly modelPortfolioId: string
    
}

/**
 * Request parameters for getPortfolioBalances operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiGetPortfolioBalancesRequest
 */
export type PortfolioManagementApiGetPortfolioBalancesRequest = {
    
    /**
    * The ID of the PortfolioGroup under which to create the target asset.
    * @type {string}
    * @memberof PortfolioManagementApiGetPortfolioBalances
    */
    readonly portfolioGroupId: string
    
}

/**
 * Request parameters for getPortfolioDetailsById operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiGetPortfolioDetailsByIdRequest
 */
export type PortfolioManagementApiGetPortfolioDetailsByIdRequest = {
    
    /**
    * The ID of the PortfolioGroup to get.
    * @type {string}
    * @memberof PortfolioManagementApiGetPortfolioDetailsById
    */
    readonly portfolioGroupId: string
    
}

/**
 * Request parameters for getPortfolioInfo operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiGetPortfolioInfoRequest
 */
export type PortfolioManagementApiGetPortfolioInfoRequest = {
    
    /**
    * The ID of the PortfolioGroup under which to create the target asset.
    * @type {string}
    * @memberof PortfolioManagementApiGetPortfolioInfo
    */
    readonly portfolioGroupId: string
    
}

/**
 * Request parameters for getPortfolioPositions operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiGetPortfolioPositionsRequest
 */
export type PortfolioManagementApiGetPortfolioPositionsRequest = {
    
    /**
    * The ID of the PortfolioGroup under which to create the target asset.
    * @type {string}
    * @memberof PortfolioManagementApiGetPortfolioPositions
    */
    readonly portfolioGroupId: string
    
}

/**
 * Request parameters for getPortfolioSettings operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiGetPortfolioSettingsRequest
 */
export type PortfolioManagementApiGetPortfolioSettingsRequest = {
    
    /**
    * The ID of the PortfolioGroup under which to get the settings.
    * @type {string}
    * @memberof PortfolioManagementApiGetPortfolioSettings
    */
    readonly portfolioGroupId: string
    
}

/**
 * Request parameters for getPortfolioTargetById operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiGetPortfolioTargetByIdRequest
 */
export type PortfolioManagementApiGetPortfolioTargetByIdRequest = {
    
    /**
    * The ID of the PortfolioGroup under which to get the target asset.
    * @type {string}
    * @memberof PortfolioManagementApiGetPortfolioTargetById
    */
    readonly portfolioGroupId: string
    
    /**
    * The ID of the TargetAsset to get.
    * @type {string}
    * @memberof PortfolioManagementApiGetPortfolioTargetById
    */
    readonly targetAssetId: string
    
}

/**
 * Request parameters for getPortfolioTargets operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiGetPortfolioTargetsRequest
 */
export type PortfolioManagementApiGetPortfolioTargetsRequest = {
    
    /**
    * The ID of the PortfolioGroup under which to create the target asset.
    * @type {string}
    * @memberof PortfolioManagementApiGetPortfolioTargets
    */
    readonly portfolioGroupId: string
    
}

/**
 * Request parameters for getPortoflioExcludedAssets operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiGetPortoflioExcludedAssetsRequest
 */
export type PortfolioManagementApiGetPortoflioExcludedAssetsRequest = {
    
    /**
    * The ID of the PortfolioGroup under which the excluded assets are linked.
    * @type {string}
    * @memberof PortfolioManagementApiGetPortoflioExcludedAssets
    */
    readonly portfolioGroupId: string
    
}

/**
 * Request parameters for importModelPortfolio operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiImportModelPortfolioRequest
 */
export type PortfolioManagementApiImportModelPortfolioRequest = {
    
    /**
    * The ID of the PortfolioGroup under which to create the target asset.
    * @type {string}
    * @memberof PortfolioManagementApiImportModelPortfolio
    */
    readonly portfolioGroupId: string
    
}

/**
 * Request parameters for list operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiListRequest
 */
export type PortfolioManagementApiListRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PortfolioManagementApiList
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof PortfolioManagementApiList
    */
    readonly userSecret: string
    
}

/**
 * Request parameters for listCalculatedTrades operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiListCalculatedTradesRequest
 */
export type PortfolioManagementApiListCalculatedTradesRequest = {
    
    /**
    * The ID of the PortfolioGroup to perform rebalancing calculations
    * @type {string}
    * @memberof PortfolioManagementApiListCalculatedTrades
    */
    readonly portfolioGroupId: string
    
}

/**
 * Request parameters for listPortfolioAccounts operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiListPortfolioAccountsRequest
 */
export type PortfolioManagementApiListPortfolioAccountsRequest = {
    
    /**
    * The ID of the PortfolioGroup under which the accounts are linked.
    * @type {string}
    * @memberof PortfolioManagementApiListPortfolioAccounts
    */
    readonly portfolioGroupId: string
    
}

/**
 * Request parameters for modifyModelPortfolioById operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiModifyModelPortfolioByIdRequest
 */
export type PortfolioManagementApiModifyModelPortfolioByIdRequest = {
    
    /**
    * The ID of the model portfolio to update.
    * @type {string}
    * @memberof PortfolioManagementApiModifyModelPortfolioById
    */
    readonly modelPortfolioId: string
    
} & ModelPortfolioDetails

/**
 * Request parameters for savePortfolio operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiSavePortfolioRequest
 */
export type PortfolioManagementApiSavePortfolioRequest = {
    
    /**
    * The ID of the PortfolioGroup to update.
    * @type {string}
    * @memberof PortfolioManagementApiSavePortfolio
    */
    readonly portfolioGroupId: string
    
} & { [key: string]: any; }

/**
 * Request parameters for searchPortfolioSymbols operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiSearchPortfolioSymbolsRequest
 */
export type PortfolioManagementApiSearchPortfolioSymbolsRequest = {
    
    /**
    * The ID of the PortfolioGroup to search under
    * @type {string}
    * @memberof PortfolioManagementApiSearchPortfolioSymbols
    */
    readonly portfolioGroupId: string
    
} & SymbolQuery

/**
 * Request parameters for setPortfolioTargets operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiSetPortfolioTargetsRequest
 */
export type PortfolioManagementApiSetPortfolioTargetsRequest = {
    /**
    * The ID of the PortfolioGroup under which to create the target asset.
    * @type {string}
    * @memberof PortfolioManagementApiSetPortfolioTargets
    */
    readonly portfolioGroupId: string
    /**
    * 
    * @type {Array<TargetAsset>}
    * @memberof PortfolioManagementApiSetPortfolioTargets
    */
    readonly requestBody?: Array<TargetAsset>
}

/**
 * Request parameters for updateAssetClass operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiUpdateAssetClassRequest
 */
export type PortfolioManagementApiUpdateAssetClassRequest = {
    
    /**
    * The ID of the model asset class to update.
    * @type {string}
    * @memberof PortfolioManagementApiUpdateAssetClass
    */
    readonly modelAssetClassId: string
    
} & ModelAssetClassDetails

/**
 * Request parameters for updatePortfolioSettings operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiUpdatePortfolioSettingsRequest
 */
export type PortfolioManagementApiUpdatePortfolioSettingsRequest = {
    
    /**
    * The ID of the PortfolioGroup under which to patch the settings.
    * @type {string}
    * @memberof PortfolioManagementApiUpdatePortfolioSettings
    */
    readonly portfolioGroupId: string
    
}

/**
 * Request parameters for updatePortfolioTargetById operation in PortfolioManagementApi.
 * @export
 * @interface PortfolioManagementApiUpdatePortfolioTargetByIdRequest
 */
export type PortfolioManagementApiUpdatePortfolioTargetByIdRequest = {
    
    /**
    * The ID of the PortfolioGroup under which to patch the target asset.
    * @type {string}
    * @memberof PortfolioManagementApiUpdatePortfolioTargetById
    */
    readonly portfolioGroupId: string
    
    /**
    * The ID of the TargetAsset to patch.
    * @type {string}
    * @memberof PortfolioManagementApiUpdatePortfolioTargetById
    */
    readonly targetAssetId: string
    
} & TargetAsset

/**
 * PortfolioManagementApi - object-oriented interface
 * @export
 * @class PortfolioManagementApi
 * @extends {BaseAPI}
 */
export class PortfolioManagementApi extends BaseAPI {
    /**
     * 
     * @summary Adds an asset to exclude to a portfolio group
     * @param {PortfolioManagementApiAddPortfolioExcludedAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public addPortfolioExcludedAsset(requestParameters: PortfolioManagementApiAddPortfolioExcludedAssetRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).addPortfolioExcludedAsset(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new portfolio group
     * @param {PortfolioManagementApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public create(requestParameters: PortfolioManagementApiCreateRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new model asset class
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public createAssetClass(options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).createAssetClass(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new model portfolio
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public createModelPortfolio(options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).createModelPortfolio(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a model asset class
     * @param {PortfolioManagementApiDeleteAssetClassRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public deleteAssetClass(requestParameters: PortfolioManagementApiDeleteAssetClassRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).deleteAssetClass(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Unexclude an asset from a portfolio group
     * @param {PortfolioManagementApiDeleteExcludedAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public deleteExcludedAsset(requestParameters: PortfolioManagementApiDeleteExcludedAssetRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).deleteExcludedAsset(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a model portfolio
     * @param {PortfolioManagementApiDeleteModelPortfolioByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public deleteModelPortfolioById(requestParameters: PortfolioManagementApiDeleteModelPortfolioByIdRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).deleteModelPortfolioById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a target portfolio.
     * @param {PortfolioManagementApiDeletePortfoliRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public deletePortfoli(requestParameters: PortfolioManagementApiDeletePortfoliRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).deletePortfoli(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a TargetAsset.
     * @param {PortfolioManagementApiDeletePortfolioTargetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public deletePortfolioTargetById(requestParameters: PortfolioManagementApiDeletePortfolioTargetByIdRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).deletePortfolioTargetById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get details of a model asset class
     * @param {PortfolioManagementApiDetailAssetClassRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public detailAssetClass(requestParameters: PortfolioManagementApiDetailAssetClassRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).detailAssetClass(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return an individual trade
     * @param {PortfolioManagementApiGetCalculatedTradeByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public getCalculatedTradeById(requestParameters: PortfolioManagementApiGetCalculatedTradeByIdRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).getCalculatedTradeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get details of a model portfolio
     * @param {PortfolioManagementApiGetModelDetailsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public getModelDetailsById(requestParameters: PortfolioManagementApiGetModelDetailsByIdRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).getModelDetailsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get sum of cash balances in portfolio group
     * @param {PortfolioManagementApiGetPortfolioBalancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public getPortfolioBalances(requestParameters: PortfolioManagementApiGetPortfolioBalancesRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).getPortfolioBalances(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get details of a target portfolio
     * @param {PortfolioManagementApiGetPortfolioDetailsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public getPortfolioDetailsById(requestParameters: PortfolioManagementApiGetPortfolioDetailsByIdRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).getPortfolioDetailsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return a whole bunch of relevant information relating to a portfolio group.
     * @param {PortfolioManagementApiGetPortfolioInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public getPortfolioInfo(requestParameters: PortfolioManagementApiGetPortfolioInfoRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).getPortfolioInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get total of each postions owned in portfolio group
     * @param {PortfolioManagementApiGetPortfolioPositionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public getPortfolioPositions(requestParameters: PortfolioManagementApiGetPortfolioPositionsRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).getPortfolioPositions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get portfolio group settings
     * @param {PortfolioManagementApiGetPortfolioSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public getPortfolioSettings(requestParameters: PortfolioManagementApiGetPortfolioSettingsRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).getPortfolioSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific target from a portfolio group
     * @param {PortfolioManagementApiGetPortfolioTargetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public getPortfolioTargetById(requestParameters: PortfolioManagementApiGetPortfolioTargetByIdRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).getPortfolioTargetById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all target assets under the specified PortfolioGroup.
     * @param {PortfolioManagementApiGetPortfolioTargetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public getPortfolioTargets(requestParameters: PortfolioManagementApiGetPortfolioTargetsRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).getPortfolioTargets(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an array of excluded assets associated with a portfolio group\\
     * @param {PortfolioManagementApiGetPortoflioExcludedAssetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public getPortoflioExcludedAssets(requestParameters: PortfolioManagementApiGetPortoflioExcludedAssetsRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).getPortoflioExcludedAssets(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Import target allocation based on portfolio group
     * @param {PortfolioManagementApiImportModelPortfolioRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public importModelPortfolio(requestParameters: PortfolioManagementApiImportModelPortfolioRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).importModelPortfolio(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all portfolio groups
     * @param {PortfolioManagementApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public list(requestParameters: PortfolioManagementApiListRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List of model asset class
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public listAssetClasses(options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).listAssetClasses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List of trades to make to rebalance portfolio group
     * @param {PortfolioManagementApiListCalculatedTradesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public listCalculatedTrades(requestParameters: PortfolioManagementApiListCalculatedTradesRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).listCalculatedTrades(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List of model portfolio
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public listModelPortfolio(options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).listModelPortfolio(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all accounts associated with a portfolio group
     * @param {PortfolioManagementApiListPortfolioAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public listPortfolioAccounts(requestParameters: PortfolioManagementApiListPortfolioAccountsRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).listPortfolioAccounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates model portfolio object
     * @param {PortfolioManagementApiModifyModelPortfolioByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public modifyModelPortfolioById(requestParameters: PortfolioManagementApiModifyModelPortfolioByIdRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).modifyModelPortfolioById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing target portfolio.
     * @param {PortfolioManagementApiSavePortfolioRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public savePortfolio(requestParameters: PortfolioManagementApiSavePortfolioRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).savePortfolio(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search for symbols limited to brokerages under the specified portfolio group
     * @param {PortfolioManagementApiSearchPortfolioSymbolsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public searchPortfolioSymbols(requestParameters: PortfolioManagementApiSearchPortfolioSymbolsRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).searchPortfolioSymbols(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set a new list of target assets under the specified PortfolioGroup. All existing target assets under this portfolio group will be replaced with the new list.
     * @param {PortfolioManagementApiSetPortfolioTargetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public setPortfolioTargets(requestParameters: PortfolioManagementApiSetPortfolioTargetsRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).setPortfolioTargets(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates model asset class objects
     * @param {PortfolioManagementApiUpdateAssetClassRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public updateAssetClass(requestParameters: PortfolioManagementApiUpdateAssetClassRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).updateAssetClass(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates portfolio group settings
     * @param {PortfolioManagementApiUpdatePortfolioSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public updatePortfolioSettings(requestParameters: PortfolioManagementApiUpdatePortfolioSettingsRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).updatePortfolioSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a TargetAsset under the specified PortfolioGroup.
     * @param {PortfolioManagementApiUpdatePortfolioTargetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioManagementApi
     */
    public updatePortfolioTargetById(requestParameters: PortfolioManagementApiUpdatePortfolioTargetByIdRequest, options?: AxiosRequestConfig) {
        return PortfolioManagementApiFp(this.configuration).updatePortfolioTargetById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
