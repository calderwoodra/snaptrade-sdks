/* tslint:disable */
/* eslint-disable */
/**
 * SnapTrade
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

// May contain unused imports in some cases
// @ts-ignore
import { AccountSimple } from './account-simple';
// May contain unused imports in some cases
// @ts-ignore
import { Currency } from './currency';
// May contain unused imports in some cases
// @ts-ignore
import { OptionsSymbol } from './options-symbol';
// May contain unused imports in some cases
// @ts-ignore
import { Symbol } from './symbol';

/**
 * A transaction or activity from an institution
 * @export
 * @interface UniversalActivity
 */
export interface UniversalActivity {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof UniversalActivity
     */
    'id'?: string | null;
    /**
     * 
     * @type {AccountSimple}
     * @memberof UniversalActivity
     */
    'account'?: AccountSimple | null;
    /**
     * 
     * @type {number}
     * @memberof UniversalActivity
     */
    'amount'?: number | null;
    /**
     * 
     * @type {Currency}
     * @memberof UniversalActivity
     */
    'currency'?: Currency | null;
    /**
     * 
     * @type {string}
     * @memberof UniversalActivity
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UniversalActivity
     */
    'fee'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UniversalActivity
     */
    'institution'?: string | null;
    /**
     * If an option transaction, then it\'s type (BUY_TO_OPEN, SELL_TO_CLOSE, etc), otherwise empty string
     * @type {string}
     * @memberof UniversalActivity
     */
    'option_type'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UniversalActivity
     */
    'price'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UniversalActivity
     */
    'settlement_date'?: string | null;
    /**
     * 
     * @type {Symbol}
     * @memberof UniversalActivity
     */
    'symbol'?: Symbol | null;
    /**
     * 
     * @type {OptionsSymbol}
     * @memberof UniversalActivity
     */
    'option_symbol'?: OptionsSymbol | null;
    /**
     * 
     * @type {string}
     * @memberof UniversalActivity
     */
    'trade_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UniversalActivity
     */
    'type'?: UniversalActivityTypeEnum;
    /**
     * Usually but not necessarily an integer
     * @type {number}
     * @memberof UniversalActivity
     */
    'units'?: number | null;
}

export const UniversalActivityTypeEnum = {
    Dividend: 'DIVIDEND',
    Buy: 'BUY',
    Sell: 'SELL',
    Contribution: 'CONTRIBUTION',
    Withdrawal: 'WITHDRAWAL',
    ExternalAssetTransferIn: 'EXTERNAL_ASSET_TRANSFER_IN',
    ExternalAssetTransferOut: 'EXTERNAL_ASSET_TRANSFER_OUT',
    InternalCashTransferIn: 'INTERNAL_CASH_TRANSFER_IN',
    InternalCashTransferOut: 'INTERNAL_CASH_TRANSFER_OUT',
    InternalAssetTransferIn: 'INTERNAL_ASSET_TRANSFER_IN',
    InternalAssetTransferOut: 'INTERNAL_ASSET_TRANSFER_OUT',
    Interest: 'INTEREST',
    Rebate: 'REBATE',
    GovGrant: 'GOV_GRANT',
    Tax: 'TAX',
    Fee: 'FEE',
    Rei: 'REI',
    Fxt: 'FXT'
} as const;

export type UniversalActivityTypeEnum = typeof UniversalActivityTypeEnum[keyof typeof UniversalActivityTypeEnum];


