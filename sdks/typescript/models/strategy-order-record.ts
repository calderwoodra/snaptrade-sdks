/* tslint:disable */
/* eslint-disable */
/**
 * SnapTrade
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

// May contain unused imports in some cases
// @ts-ignore
import { OptionStrategy } from './option-strategy';

/**
 * Strategy order record
 * @export
 * @interface StrategyOrderRecord
 */
export interface StrategyOrderRecord {
    [key: string]: any;

    /**
     * 
     * @type {OptionStrategy}
     * @memberof StrategyOrderRecord
     */
    'strategy'?: OptionStrategy | null;
    /**
     * 
     * @type {string}
     * @memberof StrategyOrderRecord
     */
    'status'?: StrategyOrderRecordStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof StrategyOrderRecord
     */
    'filled_quantity'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof StrategyOrderRecord
     */
    'open_quantity'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof StrategyOrderRecord
     */
    'closed_quantity'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof StrategyOrderRecord
     */
    'order_type'?: StrategyOrderRecordOrderTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof StrategyOrderRecord
     */
    'time_in_force'?: StrategyOrderRecordTimeInForceEnum;
    /**
     * Trade Price if limit or stop limit order
     * @type {number}
     * @memberof StrategyOrderRecord
     */
    'limit_price'?: number | null;
    /**
     * Trade Price if limit or stop limit order
     * @type {number}
     * @memberof StrategyOrderRecord
     */
    'execution_price'?: number | null;
    /**
     * Time
     * @type {string}
     * @memberof StrategyOrderRecord
     */
    'time_placed'?: string | null;
    /**
     * Time
     * @type {string}
     * @memberof StrategyOrderRecord
     */
    'time_updated'?: string | null;
}

export const StrategyOrderRecordStatusEnum = {
    Pending: 'PENDING',
    Accepted: 'ACCEPTED',
    Failed: 'FAILED',
    Rejected: 'REJECTED',
    Canceled: 'CANCELED',
    PartialCanceled: 'PARTIAL_CANCELED',
    CancelPending: 'CANCEL_PENDING',
    Executed: 'EXECUTED',
    Partial: 'PARTIAL',
    ReplacePending: 'REPLACE_PENDING',
    Replaced: 'REPLACED',
    Stopped: 'STOPPED',
    Suspended: 'SUSPENDED',
    Expired: 'EXPIRED',
    Queued: 'QUEUED',
    Triggered: 'TRIGGERED',
    Activated: 'ACTIVATED',
    PendingRiskReview: 'PENDING_RISK_REVIEW',
    ContingentOrder: 'CONTINGENT_ORDER'
} as const;

export type StrategyOrderRecordStatusEnum = typeof StrategyOrderRecordStatusEnum[keyof typeof StrategyOrderRecordStatusEnum];
export const StrategyOrderRecordOrderTypeEnum = {
    Limit: 'Limit',
    Market: 'Market',
    NetDebit: 'NetDebit',
    NetCredit: 'NetCredit'
} as const;

export type StrategyOrderRecordOrderTypeEnum = typeof StrategyOrderRecordOrderTypeEnum[keyof typeof StrategyOrderRecordOrderTypeEnum];
export const StrategyOrderRecordTimeInForceEnum = {
    Day: 'DAY',
    Gtc: 'GTC'
} as const;

export type StrategyOrderRecordTimeInForceEnum = typeof StrategyOrderRecordTimeInForceEnum[keyof typeof StrategyOrderRecordTimeInForceEnum];


