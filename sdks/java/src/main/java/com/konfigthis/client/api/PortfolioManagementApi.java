/*
 * SnapTrade
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Account;
import com.konfigthis.client.model.Balance;
import com.konfigthis.client.model.CalculatedTrade;
import com.konfigthis.client.model.ExcludedAsset;
import com.konfigthis.client.model.ModelAssetClassDetails;
import com.konfigthis.client.model.ModelPortfolioDetails;
import com.konfigthis.client.model.PortfolioGroup;
import com.konfigthis.client.model.PortfolioGroupInfo;
import com.konfigthis.client.model.PortfolioGroupPosition;
import com.konfigthis.client.model.PortfolioGroupSettings;
import com.konfigthis.client.model.SymbolQuery;
import com.konfigthis.client.model.TargetAsset;
import com.konfigthis.client.model.Trade;
import java.util.UUID;
import com.konfigthis.client.model.UniversalSymbol;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PortfolioManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PortfolioManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PortfolioManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addPortfolioExcludedAsset
     * @param portfolioGroupId The ID of the PortfolioGroup under which to exclude an asset. (required)
     * @param universalSymbol  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An asset is excluded from calculations in portfolio group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPortfolioExcludedAssetCall(UUID portfolioGroupId, UniversalSymbol universalSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = universalSymbol;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/excludedassets"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPortfolioExcludedAssetValidateBeforeCall(UUID portfolioGroupId, UniversalSymbol universalSymbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling addPortfolioExcludedAsset(Async)");
        }

        return addPortfolioExcludedAssetCall(portfolioGroupId, universalSymbol, _callback);

    }

    /**
     * Adds an asset to exclude to a portfolio group
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to exclude an asset. (required)
     * @param universalSymbol  (optional)
     * @return ExcludedAsset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An asset is excluded from calculations in portfolio group. </td><td>  -  </td></tr>
     </table>
     */
    public ExcludedAsset addPortfolioExcludedAsset(UUID portfolioGroupId, UniversalSymbol universalSymbol) throws ApiException {
        ApiResponse<ExcludedAsset> localVarResp = addPortfolioExcludedAssetWithHttpInfo(portfolioGroupId, universalSymbol);
        return localVarResp.getData();
    }

    /**
     * Adds an asset to exclude to a portfolio group
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to exclude an asset. (required)
     * @param universalSymbol  (optional)
     * @return ApiResponse&lt;ExcludedAsset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An asset is excluded from calculations in portfolio group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExcludedAsset> addPortfolioExcludedAssetWithHttpInfo(UUID portfolioGroupId, UniversalSymbol universalSymbol) throws ApiException {
        okhttp3.Call localVarCall = addPortfolioExcludedAssetValidateBeforeCall(portfolioGroupId, universalSymbol, null);
        Type localVarReturnType = new TypeToken<ExcludedAsset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds an asset to exclude to a portfolio group (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to exclude an asset. (required)
     * @param universalSymbol  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An asset is excluded from calculations in portfolio group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPortfolioExcludedAssetAsync(UUID portfolioGroupId, UniversalSymbol universalSymbol, final ApiCallback<ExcludedAsset> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPortfolioExcludedAssetValidateBeforeCall(portfolioGroupId, universalSymbol, _callback);
        Type localVarReturnType = new TypeToken<ExcludedAsset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callList
     * @param userId  (required)
     * @param userSecret  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all PortfolioGroup objects for the authenticated user. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callListCall(String userId, String userSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (userSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userSecret", userSecret));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callListValidateBeforeCall(String userId, String userSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling callList(Async)");
        }

        // verify the required parameter 'userSecret' is set
        if (userSecret == null) {
            throw new ApiException("Missing the required parameter 'userSecret' when calling callList(Async)");
        }

        return callListCall(userId, userSecret, _callback);

    }

    /**
     * List all portfolio groups
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @return List&lt;PortfolioGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all PortfolioGroup objects for the authenticated user. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public List<PortfolioGroup> callList(String userId, String userSecret) throws ApiException {
        ApiResponse<List<PortfolioGroup>> localVarResp = callListWithHttpInfo(userId, userSecret);
        return localVarResp.getData();
    }

    /**
     * List all portfolio groups
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @return ApiResponse&lt;List&lt;PortfolioGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all PortfolioGroup objects for the authenticated user. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PortfolioGroup>> callListWithHttpInfo(String userId, String userSecret) throws ApiException {
        okhttp3.Call localVarCall = callListValidateBeforeCall(userId, userSecret, null);
        Type localVarReturnType = new TypeToken<List<PortfolioGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all portfolio groups (asynchronously)
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all PortfolioGroup objects for the authenticated user. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callListAsync(String userId, String userSecret, final ApiCallback<List<PortfolioGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = callListValidateBeforeCall(userId, userSecret, _callback);
        Type localVarReturnType = new TypeToken<List<PortfolioGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for create
     * @param userId  (required)
     * @param userSecret  (required)
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A new PortfolioGroup is created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The input data is missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCall(String userId, String userSecret, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/portfolioGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (userSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userSecret", userSecret));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(String userId, String userSecret, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling create(Async)");
        }

        // verify the required parameter 'userSecret' is set
        if (userSecret == null) {
            throw new ApiException("Missing the required parameter 'userSecret' when calling create(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling create(Async)");
        }

        return createCall(userId, userSecret, requestBody, _callback);

    }

    /**
     * Create new portfolio group
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param requestBody  (required)
     * @return List&lt;PortfolioGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A new PortfolioGroup is created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The input data is missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public List<PortfolioGroup> create(String userId, String userSecret, Map<String, Object> requestBody) throws ApiException {
        ApiResponse<List<PortfolioGroup>> localVarResp = createWithHttpInfo(userId, userSecret, requestBody);
        return localVarResp.getData();
    }

    /**
     * Create new portfolio group
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param requestBody  (required)
     * @return ApiResponse&lt;List&lt;PortfolioGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A new PortfolioGroup is created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The input data is missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PortfolioGroup>> createWithHttpInfo(String userId, String userSecret, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(userId, userSecret, requestBody, null);
        Type localVarReturnType = new TypeToken<List<PortfolioGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new portfolio group (asynchronously)
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A new PortfolioGroup is created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The input data is missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAsync(String userId, String userSecret, Map<String, Object> requestBody, final ApiCallback<List<PortfolioGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(userId, userSecret, requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<PortfolioGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAssetClass
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A new asset class is created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssetClassCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/modelAssetClass";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAssetClassValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return createAssetClassCall(_callback);

    }

    /**
     * Create a new model asset class
     * 
     * @return ModelAssetClassDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A new asset class is created. </td><td>  -  </td></tr>
     </table>
     */
    public ModelAssetClassDetails createAssetClass() throws ApiException {
        ApiResponse<ModelAssetClassDetails> localVarResp = createAssetClassWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Create a new model asset class
     * 
     * @return ApiResponse&lt;ModelAssetClassDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A new asset class is created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelAssetClassDetails> createAssetClassWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createAssetClassValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ModelAssetClassDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new model asset class (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A new asset class is created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssetClassAsync(final ApiCallback<ModelAssetClassDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAssetClassValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ModelAssetClassDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createModelPortfolio
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A new model portfolio is created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createModelPortfolioCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/modelPortfolio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createModelPortfolioValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return createModelPortfolioCall(_callback);

    }

    /**
     * Creates a new model portfolio
     * 
     * @return ModelPortfolioDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A new model portfolio is created. </td><td>  -  </td></tr>
     </table>
     */
    public ModelPortfolioDetails createModelPortfolio() throws ApiException {
        ApiResponse<ModelPortfolioDetails> localVarResp = createModelPortfolioWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Creates a new model portfolio
     * 
     * @return ApiResponse&lt;ModelPortfolioDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A new model portfolio is created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelPortfolioDetails> createModelPortfolioWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createModelPortfolioValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ModelPortfolioDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new model portfolio (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A new model portfolio is created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createModelPortfolioAsync(final ApiCallback<ModelPortfolioDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = createModelPortfolioValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ModelPortfolioDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAssetClass
     * @param modelAssetClassId The ID of the model asset class to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAssetClassCall(UUID modelAssetClassId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/modelAssetClass/{modelAssetClassId}"
            .replace("{" + "modelAssetClassId" + "}", localVarApiClient.escapeString(modelAssetClassId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAssetClassValidateBeforeCall(UUID modelAssetClassId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelAssetClassId' is set
        if (modelAssetClassId == null) {
            throw new ApiException("Missing the required parameter 'modelAssetClassId' when calling deleteAssetClass(Async)");
        }

        return deleteAssetClassCall(modelAssetClassId, _callback);

    }

    /**
     * Deletes a model asset class
     * 
     * @param modelAssetClassId The ID of the model asset class to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAssetClass(UUID modelAssetClassId) throws ApiException {
        deleteAssetClassWithHttpInfo(modelAssetClassId);
    }

    /**
     * Deletes a model asset class
     * 
     * @param modelAssetClassId The ID of the model asset class to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAssetClassWithHttpInfo(UUID modelAssetClassId) throws ApiException {
        okhttp3.Call localVarCall = deleteAssetClassValidateBeforeCall(modelAssetClassId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a model asset class (asynchronously)
     * 
     * @param modelAssetClassId The ID of the model asset class to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAssetClassAsync(UUID modelAssetClassId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAssetClassValidateBeforeCall(modelAssetClassId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteExcludedAsset
     * @param portfolioGroupId The ID of the PortfolioGroup under which to unexclude an asset. (required)
     * @param symbolId The ID of the excluded asset Symbol to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Excluded asset deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExcludedAssetCall(UUID portfolioGroupId, UUID symbolId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/excludedassets/{symbolId}"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()))
            .replace("{" + "symbolId" + "}", localVarApiClient.escapeString(symbolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExcludedAssetValidateBeforeCall(UUID portfolioGroupId, UUID symbolId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling deleteExcludedAsset(Async)");
        }

        // verify the required parameter 'symbolId' is set
        if (symbolId == null) {
            throw new ApiException("Missing the required parameter 'symbolId' when calling deleteExcludedAsset(Async)");
        }

        return deleteExcludedAssetCall(portfolioGroupId, symbolId, _callback);

    }

    /**
     * Unexclude an asset from a portfolio group
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to unexclude an asset. (required)
     * @param symbolId The ID of the excluded asset Symbol to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Excluded asset deleted </td><td>  -  </td></tr>
     </table>
     */
    public void deleteExcludedAsset(UUID portfolioGroupId, UUID symbolId) throws ApiException {
        deleteExcludedAssetWithHttpInfo(portfolioGroupId, symbolId);
    }

    /**
     * Unexclude an asset from a portfolio group
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to unexclude an asset. (required)
     * @param symbolId The ID of the excluded asset Symbol to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Excluded asset deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteExcludedAssetWithHttpInfo(UUID portfolioGroupId, UUID symbolId) throws ApiException {
        okhttp3.Call localVarCall = deleteExcludedAssetValidateBeforeCall(portfolioGroupId, symbolId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unexclude an asset from a portfolio group (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to unexclude an asset. (required)
     * @param symbolId The ID of the excluded asset Symbol to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Excluded asset deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExcludedAssetAsync(UUID portfolioGroupId, UUID symbolId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExcludedAssetValidateBeforeCall(portfolioGroupId, symbolId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteModelPortfolioById
     * @param modelPortfolioId The ID of the model portfolio to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteModelPortfolioByIdCall(UUID modelPortfolioId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/modelPortfolio/{modelPortfolioId}"
            .replace("{" + "modelPortfolioId" + "}", localVarApiClient.escapeString(modelPortfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteModelPortfolioByIdValidateBeforeCall(UUID modelPortfolioId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelPortfolioId' is set
        if (modelPortfolioId == null) {
            throw new ApiException("Missing the required parameter 'modelPortfolioId' when calling deleteModelPortfolioById(Async)");
        }

        return deleteModelPortfolioByIdCall(modelPortfolioId, _callback);

    }

    /**
     * Deletes a model portfolio
     * 
     * @param modelPortfolioId The ID of the model portfolio to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteModelPortfolioById(UUID modelPortfolioId) throws ApiException {
        deleteModelPortfolioByIdWithHttpInfo(modelPortfolioId);
    }

    /**
     * Deletes a model portfolio
     * 
     * @param modelPortfolioId The ID of the model portfolio to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteModelPortfolioByIdWithHttpInfo(UUID modelPortfolioId) throws ApiException {
        okhttp3.Call localVarCall = deleteModelPortfolioByIdValidateBeforeCall(modelPortfolioId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a model portfolio (asynchronously)
     * 
     * @param modelPortfolioId The ID of the model portfolio to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteModelPortfolioByIdAsync(UUID modelPortfolioId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteModelPortfolioByIdValidateBeforeCall(modelPortfolioId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePortfoli
     * @param portfolioGroupId The ID of the PortfolioGroup to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The PortfolioGroup object which was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePortfoliCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePortfoliValidateBeforeCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling deletePortfoli(Async)");
        }

        return deletePortfoliCall(portfolioGroupId, _callback);

    }

    /**
     * Remove a target portfolio.
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to delete. (required)
     * @return PortfolioGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The PortfolioGroup object which was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public PortfolioGroup deletePortfoli(UUID portfolioGroupId) throws ApiException {
        ApiResponse<PortfolioGroup> localVarResp = deletePortfoliWithHttpInfo(portfolioGroupId);
        return localVarResp.getData();
    }

    /**
     * Remove a target portfolio.
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to delete. (required)
     * @return ApiResponse&lt;PortfolioGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The PortfolioGroup object which was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PortfolioGroup> deletePortfoliWithHttpInfo(UUID portfolioGroupId) throws ApiException {
        okhttp3.Call localVarCall = deletePortfoliValidateBeforeCall(portfolioGroupId, null);
        Type localVarReturnType = new TypeToken<PortfolioGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a target portfolio. (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The PortfolioGroup object which was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePortfoliAsync(UUID portfolioGroupId, final ApiCallback<PortfolioGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePortfoliValidateBeforeCall(portfolioGroupId, _callback);
        Type localVarReturnType = new TypeToken<PortfolioGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePortfolioTargetById
     * @param portfolioGroupId The ID of the PortfolioGroup under which to remove the target asset. (required)
     * @param targetAssetId The ID of the TargetAsset to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The TargetAsset object which was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId or targetAssetId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId or targetAssetId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePortfolioTargetByIdCall(UUID portfolioGroupId, UUID targetAssetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/targets/{targetAssetId}"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()))
            .replace("{" + "targetAssetId" + "}", localVarApiClient.escapeString(targetAssetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePortfolioTargetByIdValidateBeforeCall(UUID portfolioGroupId, UUID targetAssetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling deletePortfolioTargetById(Async)");
        }

        // verify the required parameter 'targetAssetId' is set
        if (targetAssetId == null) {
            throw new ApiException("Missing the required parameter 'targetAssetId' when calling deletePortfolioTargetById(Async)");
        }

        return deletePortfolioTargetByIdCall(portfolioGroupId, targetAssetId, _callback);

    }

    /**
     * Remove a TargetAsset.
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to remove the target asset. (required)
     * @param targetAssetId The ID of the TargetAsset to delete. (required)
     * @return TargetAsset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The TargetAsset object which was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId or targetAssetId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId or targetAssetId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public TargetAsset deletePortfolioTargetById(UUID portfolioGroupId, UUID targetAssetId) throws ApiException {
        ApiResponse<TargetAsset> localVarResp = deletePortfolioTargetByIdWithHttpInfo(portfolioGroupId, targetAssetId);
        return localVarResp.getData();
    }

    /**
     * Remove a TargetAsset.
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to remove the target asset. (required)
     * @param targetAssetId The ID of the TargetAsset to delete. (required)
     * @return ApiResponse&lt;TargetAsset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The TargetAsset object which was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId or targetAssetId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId or targetAssetId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetAsset> deletePortfolioTargetByIdWithHttpInfo(UUID portfolioGroupId, UUID targetAssetId) throws ApiException {
        okhttp3.Call localVarCall = deletePortfolioTargetByIdValidateBeforeCall(portfolioGroupId, targetAssetId, null);
        Type localVarReturnType = new TypeToken<TargetAsset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a TargetAsset. (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to remove the target asset. (required)
     * @param targetAssetId The ID of the TargetAsset to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The TargetAsset object which was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId or targetAssetId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId or targetAssetId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePortfolioTargetByIdAsync(UUID portfolioGroupId, UUID targetAssetId, final ApiCallback<TargetAsset> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePortfolioTargetByIdValidateBeforeCall(portfolioGroupId, targetAssetId, _callback);
        Type localVarReturnType = new TypeToken<TargetAsset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detailAssetClass
     * @param modelAssetClassId The ID of the model asset class to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of a particular model asset class </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detailAssetClassCall(UUID modelAssetClassId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/modelAssetClass/{modelAssetClassId}"
            .replace("{" + "modelAssetClassId" + "}", localVarApiClient.escapeString(modelAssetClassId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detailAssetClassValidateBeforeCall(UUID modelAssetClassId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelAssetClassId' is set
        if (modelAssetClassId == null) {
            throw new ApiException("Missing the required parameter 'modelAssetClassId' when calling detailAssetClass(Async)");
        }

        return detailAssetClassCall(modelAssetClassId, _callback);

    }

    /**
     * Get details of a model asset class
     * 
     * @param modelAssetClassId The ID of the model asset class to get. (required)
     * @return ModelAssetClassDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of a particular model asset class </td><td>  -  </td></tr>
     </table>
     */
    public ModelAssetClassDetails detailAssetClass(UUID modelAssetClassId) throws ApiException {
        ApiResponse<ModelAssetClassDetails> localVarResp = detailAssetClassWithHttpInfo(modelAssetClassId);
        return localVarResp.getData();
    }

    /**
     * Get details of a model asset class
     * 
     * @param modelAssetClassId The ID of the model asset class to get. (required)
     * @return ApiResponse&lt;ModelAssetClassDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of a particular model asset class </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelAssetClassDetails> detailAssetClassWithHttpInfo(UUID modelAssetClassId) throws ApiException {
        okhttp3.Call localVarCall = detailAssetClassValidateBeforeCall(modelAssetClassId, null);
        Type localVarReturnType = new TypeToken<ModelAssetClassDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details of a model asset class (asynchronously)
     * 
     * @param modelAssetClassId The ID of the model asset class to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of a particular model asset class </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detailAssetClassAsync(UUID modelAssetClassId, final ApiCallback<ModelAssetClassDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = detailAssetClassValidateBeforeCall(modelAssetClassId, _callback);
        Type localVarReturnType = new TypeToken<ModelAssetClassDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCalculatedTradeById
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param calculatedTradeId The ID of calculated trade to get account impact (required)
     * @param tradeId The ID of trade object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trade objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCalculatedTradeByIdCall(UUID portfolioGroupId, UUID calculatedTradeId, UUID tradeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/calculatedtrades/{calculatedTradeId}/{TradeId}"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()))
            .replace("{" + "calculatedTradeId" + "}", localVarApiClient.escapeString(calculatedTradeId.toString()))
            .replace("{" + "TradeId" + "}", localVarApiClient.escapeString(tradeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCalculatedTradeByIdValidateBeforeCall(UUID portfolioGroupId, UUID calculatedTradeId, UUID tradeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling getCalculatedTradeById(Async)");
        }

        // verify the required parameter 'calculatedTradeId' is set
        if (calculatedTradeId == null) {
            throw new ApiException("Missing the required parameter 'calculatedTradeId' when calling getCalculatedTradeById(Async)");
        }

        // verify the required parameter 'tradeId' is set
        if (tradeId == null) {
            throw new ApiException("Missing the required parameter 'tradeId' when calling getCalculatedTradeById(Async)");
        }

        return getCalculatedTradeByIdCall(portfolioGroupId, calculatedTradeId, tradeId, _callback);

    }

    /**
     * Return an individual trade
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param calculatedTradeId The ID of calculated trade to get account impact (required)
     * @param tradeId The ID of trade object (required)
     * @return List&lt;Trade&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trade objects </td><td>  -  </td></tr>
     </table>
     */
    public List<Trade> getCalculatedTradeById(UUID portfolioGroupId, UUID calculatedTradeId, UUID tradeId) throws ApiException {
        ApiResponse<List<Trade>> localVarResp = getCalculatedTradeByIdWithHttpInfo(portfolioGroupId, calculatedTradeId, tradeId);
        return localVarResp.getData();
    }

    /**
     * Return an individual trade
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param calculatedTradeId The ID of calculated trade to get account impact (required)
     * @param tradeId The ID of trade object (required)
     * @return ApiResponse&lt;List&lt;Trade&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trade objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Trade>> getCalculatedTradeByIdWithHttpInfo(UUID portfolioGroupId, UUID calculatedTradeId, UUID tradeId) throws ApiException {
        okhttp3.Call localVarCall = getCalculatedTradeByIdValidateBeforeCall(portfolioGroupId, calculatedTradeId, tradeId, null);
        Type localVarReturnType = new TypeToken<List<Trade>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return an individual trade (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param calculatedTradeId The ID of calculated trade to get account impact (required)
     * @param tradeId The ID of trade object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trade objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCalculatedTradeByIdAsync(UUID portfolioGroupId, UUID calculatedTradeId, UUID tradeId, final ApiCallback<List<Trade>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCalculatedTradeByIdValidateBeforeCall(portfolioGroupId, calculatedTradeId, tradeId, _callback);
        Type localVarReturnType = new TypeToken<List<Trade>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getModelDetailsById
     * @param modelPortfolioId The ID of the model portfolio to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of a particular model portfolio. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelDetailsByIdCall(UUID modelPortfolioId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/modelPortfolio/{modelPortfolioId}"
            .replace("{" + "modelPortfolioId" + "}", localVarApiClient.escapeString(modelPortfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getModelDetailsByIdValidateBeforeCall(UUID modelPortfolioId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelPortfolioId' is set
        if (modelPortfolioId == null) {
            throw new ApiException("Missing the required parameter 'modelPortfolioId' when calling getModelDetailsById(Async)");
        }

        return getModelDetailsByIdCall(modelPortfolioId, _callback);

    }

    /**
     * Get details of a model portfolio
     * 
     * @param modelPortfolioId The ID of the model portfolio to get. (required)
     * @return ModelPortfolioDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of a particular model portfolio. </td><td>  -  </td></tr>
     </table>
     */
    public ModelPortfolioDetails getModelDetailsById(UUID modelPortfolioId) throws ApiException {
        ApiResponse<ModelPortfolioDetails> localVarResp = getModelDetailsByIdWithHttpInfo(modelPortfolioId);
        return localVarResp.getData();
    }

    /**
     * Get details of a model portfolio
     * 
     * @param modelPortfolioId The ID of the model portfolio to get. (required)
     * @return ApiResponse&lt;ModelPortfolioDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of a particular model portfolio. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelPortfolioDetails> getModelDetailsByIdWithHttpInfo(UUID modelPortfolioId) throws ApiException {
        okhttp3.Call localVarCall = getModelDetailsByIdValidateBeforeCall(modelPortfolioId, null);
        Type localVarReturnType = new TypeToken<ModelPortfolioDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details of a model portfolio (asynchronously)
     * 
     * @param modelPortfolioId The ID of the model portfolio to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of a particular model portfolio. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelDetailsByIdAsync(UUID modelPortfolioId, final ApiCallback<ModelPortfolioDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getModelDetailsByIdValidateBeforeCall(modelPortfolioId, _callback);
        Type localVarReturnType = new TypeToken<ModelPortfolioDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPortfolioBalances
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sum of cash balances across accounts in portfolio group by currency </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioBalancesCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/balances"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPortfolioBalancesValidateBeforeCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling getPortfolioBalances(Async)");
        }

        return getPortfolioBalancesCall(portfolioGroupId, _callback);

    }

    /**
     * Get sum of cash balances in portfolio group
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @return List&lt;Balance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sum of cash balances across accounts in portfolio group by currency </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public List<Balance> getPortfolioBalances(UUID portfolioGroupId) throws ApiException {
        ApiResponse<List<Balance>> localVarResp = getPortfolioBalancesWithHttpInfo(portfolioGroupId);
        return localVarResp.getData();
    }

    /**
     * Get sum of cash balances in portfolio group
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @return ApiResponse&lt;List&lt;Balance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sum of cash balances across accounts in portfolio group by currency </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Balance>> getPortfolioBalancesWithHttpInfo(UUID portfolioGroupId) throws ApiException {
        okhttp3.Call localVarCall = getPortfolioBalancesValidateBeforeCall(portfolioGroupId, null);
        Type localVarReturnType = new TypeToken<List<Balance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get sum of cash balances in portfolio group (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sum of cash balances across accounts in portfolio group by currency </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioBalancesAsync(UUID portfolioGroupId, final ApiCallback<List<Balance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPortfolioBalancesValidateBeforeCall(portfolioGroupId, _callback);
        Type localVarReturnType = new TypeToken<List<Balance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPortfolioDetailsById
     * @param portfolioGroupId The ID of the PortfolioGroup to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully gets a target portfolio </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioDetailsByIdCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPortfolioDetailsByIdValidateBeforeCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling getPortfolioDetailsById(Async)");
        }

        return getPortfolioDetailsByIdCall(portfolioGroupId, _callback);

    }

    /**
     * Get details of a target portfolio
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to get. (required)
     * @return PortfolioGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully gets a target portfolio </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PortfolioGroup getPortfolioDetailsById(UUID portfolioGroupId) throws ApiException {
        ApiResponse<PortfolioGroup> localVarResp = getPortfolioDetailsByIdWithHttpInfo(portfolioGroupId);
        return localVarResp.getData();
    }

    /**
     * Get details of a target portfolio
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to get. (required)
     * @return ApiResponse&lt;PortfolioGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully gets a target portfolio </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PortfolioGroup> getPortfolioDetailsByIdWithHttpInfo(UUID portfolioGroupId) throws ApiException {
        okhttp3.Call localVarCall = getPortfolioDetailsByIdValidateBeforeCall(portfolioGroupId, null);
        Type localVarReturnType = new TypeToken<PortfolioGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details of a target portfolio (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully gets a target portfolio </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioDetailsByIdAsync(UUID portfolioGroupId, final ApiCallback<PortfolioGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPortfolioDetailsByIdValidateBeforeCall(portfolioGroupId, _callback);
        Type localVarReturnType = new TypeToken<PortfolioGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPortfolioInfo
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Portfolio group target allocation has been updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioInfoCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/info"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPortfolioInfoValidateBeforeCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling getPortfolioInfo(Async)");
        }

        return getPortfolioInfoCall(portfolioGroupId, _callback);

    }

    /**
     * Return a whole bunch of relevant information relating to a portfolio group.
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @return PortfolioGroupInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Portfolio group target allocation has been updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public PortfolioGroupInfo getPortfolioInfo(UUID portfolioGroupId) throws ApiException {
        ApiResponse<PortfolioGroupInfo> localVarResp = getPortfolioInfoWithHttpInfo(portfolioGroupId);
        return localVarResp.getData();
    }

    /**
     * Return a whole bunch of relevant information relating to a portfolio group.
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @return ApiResponse&lt;PortfolioGroupInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Portfolio group target allocation has been updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PortfolioGroupInfo> getPortfolioInfoWithHttpInfo(UUID portfolioGroupId) throws ApiException {
        okhttp3.Call localVarCall = getPortfolioInfoValidateBeforeCall(portfolioGroupId, null);
        Type localVarReturnType = new TypeToken<PortfolioGroupInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a whole bunch of relevant information relating to a portfolio group. (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Portfolio group target allocation has been updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioInfoAsync(UUID portfolioGroupId, final ApiCallback<PortfolioGroupInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPortfolioInfoValidateBeforeCall(portfolioGroupId, _callback);
        Type localVarReturnType = new TypeToken<PortfolioGroupInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPortfolioPositions
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Totals of each postions owned in portfolio group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioPositionsCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/positions"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPortfolioPositionsValidateBeforeCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling getPortfolioPositions(Async)");
        }

        return getPortfolioPositionsCall(portfolioGroupId, _callback);

    }

    /**
     * Get total of each postions owned in portfolio group
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @return List&lt;PortfolioGroupPosition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Totals of each postions owned in portfolio group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public List<PortfolioGroupPosition> getPortfolioPositions(UUID portfolioGroupId) throws ApiException {
        ApiResponse<List<PortfolioGroupPosition>> localVarResp = getPortfolioPositionsWithHttpInfo(portfolioGroupId);
        return localVarResp.getData();
    }

    /**
     * Get total of each postions owned in portfolio group
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @return ApiResponse&lt;List&lt;PortfolioGroupPosition&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Totals of each postions owned in portfolio group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PortfolioGroupPosition>> getPortfolioPositionsWithHttpInfo(UUID portfolioGroupId) throws ApiException {
        okhttp3.Call localVarCall = getPortfolioPositionsValidateBeforeCall(portfolioGroupId, null);
        Type localVarReturnType = new TypeToken<List<PortfolioGroupPosition>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get total of each postions owned in portfolio group (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Totals of each postions owned in portfolio group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioPositionsAsync(UUID portfolioGroupId, final ApiCallback<List<PortfolioGroupPosition>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPortfolioPositionsValidateBeforeCall(portfolioGroupId, _callback);
        Type localVarReturnType = new TypeToken<List<PortfolioGroupPosition>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPortfolioSettings
     * @param portfolioGroupId The ID of the PortfolioGroup under which to get the settings. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Settings of portfolio group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioSettingsCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/settings"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPortfolioSettingsValidateBeforeCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling getPortfolioSettings(Async)");
        }

        return getPortfolioSettingsCall(portfolioGroupId, _callback);

    }

    /**
     * Get portfolio group settings
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to get the settings. (required)
     * @return PortfolioGroupSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Settings of portfolio group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PortfolioGroupSettings getPortfolioSettings(UUID portfolioGroupId) throws ApiException {
        ApiResponse<PortfolioGroupSettings> localVarResp = getPortfolioSettingsWithHttpInfo(portfolioGroupId);
        return localVarResp.getData();
    }

    /**
     * Get portfolio group settings
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to get the settings. (required)
     * @return ApiResponse&lt;PortfolioGroupSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Settings of portfolio group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PortfolioGroupSettings> getPortfolioSettingsWithHttpInfo(UUID portfolioGroupId) throws ApiException {
        okhttp3.Call localVarCall = getPortfolioSettingsValidateBeforeCall(portfolioGroupId, null);
        Type localVarReturnType = new TypeToken<PortfolioGroupSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get portfolio group settings (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to get the settings. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Settings of portfolio group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioSettingsAsync(UUID portfolioGroupId, final ApiCallback<PortfolioGroupSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPortfolioSettingsValidateBeforeCall(portfolioGroupId, _callback);
        Type localVarReturnType = new TypeToken<PortfolioGroupSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPortfolioTargetById
     * @param portfolioGroupId The ID of the PortfolioGroup under which to get the target asset. (required)
     * @param targetAssetId The ID of the TargetAsset to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get target asset. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioTargetByIdCall(UUID portfolioGroupId, UUID targetAssetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/targets/{targetAssetId}"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()))
            .replace("{" + "targetAssetId" + "}", localVarApiClient.escapeString(targetAssetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPortfolioTargetByIdValidateBeforeCall(UUID portfolioGroupId, UUID targetAssetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling getPortfolioTargetById(Async)");
        }

        // verify the required parameter 'targetAssetId' is set
        if (targetAssetId == null) {
            throw new ApiException("Missing the required parameter 'targetAssetId' when calling getPortfolioTargetById(Async)");
        }

        return getPortfolioTargetByIdCall(portfolioGroupId, targetAssetId, _callback);

    }

    /**
     * Get a specific target from a portfolio group
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to get the target asset. (required)
     * @param targetAssetId The ID of the TargetAsset to get. (required)
     * @return TargetAsset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get target asset. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected errors </td><td>  -  </td></tr>
     </table>
     */
    public TargetAsset getPortfolioTargetById(UUID portfolioGroupId, UUID targetAssetId) throws ApiException {
        ApiResponse<TargetAsset> localVarResp = getPortfolioTargetByIdWithHttpInfo(portfolioGroupId, targetAssetId);
        return localVarResp.getData();
    }

    /**
     * Get a specific target from a portfolio group
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to get the target asset. (required)
     * @param targetAssetId The ID of the TargetAsset to get. (required)
     * @return ApiResponse&lt;TargetAsset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get target asset. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetAsset> getPortfolioTargetByIdWithHttpInfo(UUID portfolioGroupId, UUID targetAssetId) throws ApiException {
        okhttp3.Call localVarCall = getPortfolioTargetByIdValidateBeforeCall(portfolioGroupId, targetAssetId, null);
        Type localVarReturnType = new TypeToken<TargetAsset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific target from a portfolio group (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to get the target asset. (required)
     * @param targetAssetId The ID of the TargetAsset to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get target asset. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioTargetByIdAsync(UUID portfolioGroupId, UUID targetAssetId, final ApiCallback<TargetAsset> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPortfolioTargetByIdValidateBeforeCall(portfolioGroupId, targetAssetId, _callback);
        Type localVarReturnType = new TypeToken<TargetAsset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPortfolioTargets
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All target assets owned by the specified PortfolioGroup. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioTargetsCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/targets"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPortfolioTargetsValidateBeforeCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling getPortfolioTargets(Async)");
        }

        return getPortfolioTargetsCall(portfolioGroupId, _callback);

    }

    /**
     * Get all target assets under the specified PortfolioGroup.
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @return List&lt;TargetAsset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All target assets owned by the specified PortfolioGroup. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public List<TargetAsset> getPortfolioTargets(UUID portfolioGroupId) throws ApiException {
        ApiResponse<List<TargetAsset>> localVarResp = getPortfolioTargetsWithHttpInfo(portfolioGroupId);
        return localVarResp.getData();
    }

    /**
     * Get all target assets under the specified PortfolioGroup.
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @return ApiResponse&lt;List&lt;TargetAsset&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All target assets owned by the specified PortfolioGroup. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TargetAsset>> getPortfolioTargetsWithHttpInfo(UUID portfolioGroupId) throws ApiException {
        okhttp3.Call localVarCall = getPortfolioTargetsValidateBeforeCall(portfolioGroupId, null);
        Type localVarReturnType = new TypeToken<List<TargetAsset>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all target assets under the specified PortfolioGroup. (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All target assets owned by the specified PortfolioGroup. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioTargetsAsync(UUID portfolioGroupId, final ApiCallback<List<TargetAsset>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPortfolioTargetsValidateBeforeCall(portfolioGroupId, _callback);
        Type localVarReturnType = new TypeToken<List<TargetAsset>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPortoflioExcludedAssets
     * @param portfolioGroupId The ID of the PortfolioGroup under which the excluded assets are linked. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of excluded assets linked to portfolio group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortoflioExcludedAssetsCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/excludedassets"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPortoflioExcludedAssetsValidateBeforeCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling getPortoflioExcludedAssets(Async)");
        }

        return getPortoflioExcludedAssetsCall(portfolioGroupId, _callback);

    }

    /**
     * Get an array of excluded assets associated with a portfolio group\\
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which the excluded assets are linked. (required)
     * @return List&lt;ExcludedAsset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of excluded assets linked to portfolio group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<ExcludedAsset> getPortoflioExcludedAssets(UUID portfolioGroupId) throws ApiException {
        ApiResponse<List<ExcludedAsset>> localVarResp = getPortoflioExcludedAssetsWithHttpInfo(portfolioGroupId);
        return localVarResp.getData();
    }

    /**
     * Get an array of excluded assets associated with a portfolio group\\
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which the excluded assets are linked. (required)
     * @return ApiResponse&lt;List&lt;ExcludedAsset&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of excluded assets linked to portfolio group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ExcludedAsset>> getPortoflioExcludedAssetsWithHttpInfo(UUID portfolioGroupId) throws ApiException {
        okhttp3.Call localVarCall = getPortoflioExcludedAssetsValidateBeforeCall(portfolioGroupId, null);
        Type localVarReturnType = new TypeToken<List<ExcludedAsset>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an array of excluded assets associated with a portfolio group\\ (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which the excluded assets are linked. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of excluded assets linked to portfolio group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortoflioExcludedAssetsAsync(UUID portfolioGroupId, final ApiCallback<List<ExcludedAsset>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPortoflioExcludedAssetsValidateBeforeCall(portfolioGroupId, _callback);
        Type localVarReturnType = new TypeToken<List<ExcludedAsset>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importModelPortfolio
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Portfolio group target allocation has been updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importModelPortfolioCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/import"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importModelPortfolioValidateBeforeCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling importModelPortfolio(Async)");
        }

        return importModelPortfolioCall(portfolioGroupId, _callback);

    }

    /**
     * Import target allocation based on portfolio group
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @return List&lt;TargetAsset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Portfolio group target allocation has been updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public List<TargetAsset> importModelPortfolio(UUID portfolioGroupId) throws ApiException {
        ApiResponse<List<TargetAsset>> localVarResp = importModelPortfolioWithHttpInfo(portfolioGroupId);
        return localVarResp.getData();
    }

    /**
     * Import target allocation based on portfolio group
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @return ApiResponse&lt;List&lt;TargetAsset&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Portfolio group target allocation has been updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TargetAsset>> importModelPortfolioWithHttpInfo(UUID portfolioGroupId) throws ApiException {
        okhttp3.Call localVarCall = importModelPortfolioValidateBeforeCall(portfolioGroupId, null);
        Type localVarReturnType = new TypeToken<List<TargetAsset>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import target allocation based on portfolio group (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Portfolio group target allocation has been updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importModelPortfolioAsync(UUID portfolioGroupId, final ApiCallback<List<TargetAsset>> _callback) throws ApiException {

        okhttp3.Call localVarCall = importModelPortfolioValidateBeforeCall(portfolioGroupId, _callback);
        Type localVarReturnType = new TypeToken<List<TargetAsset>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAssetClasses
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all model asset class objects for the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAssetClassesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/modelAssetClass";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssetClassesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listAssetClassesCall(_callback);

    }

    /**
     * List of model asset class
     * 
     * @return List&lt;ModelAssetClassDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all model asset class objects for the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelAssetClassDetails> listAssetClasses() throws ApiException {
        ApiResponse<List<ModelAssetClassDetails>> localVarResp = listAssetClassesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List of model asset class
     * 
     * @return ApiResponse&lt;List&lt;ModelAssetClassDetails&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all model asset class objects for the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelAssetClassDetails>> listAssetClassesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAssetClassesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ModelAssetClassDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of model asset class (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all model asset class objects for the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAssetClassesAsync(final ApiCallback<List<ModelAssetClassDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssetClassesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ModelAssetClassDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCalculatedTrades
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Calculated trades to make </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCalculatedTradesCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/calculatedtrades"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCalculatedTradesValidateBeforeCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling listCalculatedTrades(Async)");
        }

        return listCalculatedTradesCall(portfolioGroupId, _callback);

    }

    /**
     * List of trades to make to rebalance portfolio group
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @return CalculatedTrade
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Calculated trades to make </td><td>  -  </td></tr>
     </table>
     */
    public CalculatedTrade listCalculatedTrades(UUID portfolioGroupId) throws ApiException {
        ApiResponse<CalculatedTrade> localVarResp = listCalculatedTradesWithHttpInfo(portfolioGroupId);
        return localVarResp.getData();
    }

    /**
     * List of trades to make to rebalance portfolio group
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @return ApiResponse&lt;CalculatedTrade&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Calculated trades to make </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalculatedTrade> listCalculatedTradesWithHttpInfo(UUID portfolioGroupId) throws ApiException {
        okhttp3.Call localVarCall = listCalculatedTradesValidateBeforeCall(portfolioGroupId, null);
        Type localVarReturnType = new TypeToken<CalculatedTrade>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of trades to make to rebalance portfolio group (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Calculated trades to make </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCalculatedTradesAsync(UUID portfolioGroupId, final ApiCallback<CalculatedTrade> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCalculatedTradesValidateBeforeCall(portfolioGroupId, _callback);
        Type localVarReturnType = new TypeToken<CalculatedTrade>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listModelPortfolio
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all model portfolio objects for the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listModelPortfolioCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/modelPortfolio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listModelPortfolioValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listModelPortfolioCall(_callback);

    }

    /**
     * List of model portfolio
     * 
     * @return List&lt;ModelPortfolioDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all model portfolio objects for the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelPortfolioDetails> listModelPortfolio() throws ApiException {
        ApiResponse<List<ModelPortfolioDetails>> localVarResp = listModelPortfolioWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List of model portfolio
     * 
     * @return ApiResponse&lt;List&lt;ModelPortfolioDetails&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all model portfolio objects for the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelPortfolioDetails>> listModelPortfolioWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listModelPortfolioValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ModelPortfolioDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of model portfolio (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all model portfolio objects for the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listModelPortfolioAsync(final ApiCallback<List<ModelPortfolioDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listModelPortfolioValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ModelPortfolioDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPortfolioAccounts
     * @param portfolioGroupId The ID of the PortfolioGroup under which the accounts are linked. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accounts linked to portfolio group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPortfolioAccountsCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/accounts"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPortfolioAccountsValidateBeforeCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling listPortfolioAccounts(Async)");
        }

        return listPortfolioAccountsCall(portfolioGroupId, _callback);

    }

    /**
     * Get all accounts associated with a portfolio group
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which the accounts are linked. (required)
     * @return List&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accounts linked to portfolio group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<Account> listPortfolioAccounts(UUID portfolioGroupId) throws ApiException {
        ApiResponse<List<Account>> localVarResp = listPortfolioAccountsWithHttpInfo(portfolioGroupId);
        return localVarResp.getData();
    }

    /**
     * Get all accounts associated with a portfolio group
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which the accounts are linked. (required)
     * @return ApiResponse&lt;List&lt;Account&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accounts linked to portfolio group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Account>> listPortfolioAccountsWithHttpInfo(UUID portfolioGroupId) throws ApiException {
        okhttp3.Call localVarCall = listPortfolioAccountsValidateBeforeCall(portfolioGroupId, null);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all accounts associated with a portfolio group (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which the accounts are linked. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accounts linked to portfolio group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPortfolioAccountsAsync(UUID portfolioGroupId, final ApiCallback<List<Account>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPortfolioAccountsValidateBeforeCall(portfolioGroupId, _callback);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyModelPortfolioById
     * @param modelPortfolioId The ID of the model portfolio to update. (required)
     * @param modelPortfolioDetails Use this endpoint change model asset class name and to add or remove a model portfolio security/model portfolio asset class. &lt;br /&gt;&lt;br /&gt; * The model portfolio name and model portfolio model type is required. &lt;br /&gt; * The model portfolio model type must be either 0 or 1. [0 -&gt; Securities based, 1 -&gt; Asset Class based] &lt;br /&gt;&lt;br /&gt; * If the model portfolio type is 0, the model portfolio asset class must be an empty array. &lt;br /&gt; * If the model portfolio type is 1, the model portfolio security must be an empty array. &lt;br /&gt;&lt;br /&gt; * When updating the model portfolio security, the percent is required. Only the symbol id is required for the symbol object &lt;br /&gt; * When updating the model portfolio asset classes, the percent is required. Only the model asset class id is required for the model asset class object &lt;br /&gt;&lt;br /&gt; * To remove all model portfolio securities or model portfolio asset class, set then to an empty array (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates model portfolio object with data from request body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyModelPortfolioByIdCall(UUID modelPortfolioId, ModelPortfolioDetails modelPortfolioDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelPortfolioDetails;

        // create path and map variables
        String localVarPath = "/modelPortfolio/{modelPortfolioId}"
            .replace("{" + "modelPortfolioId" + "}", localVarApiClient.escapeString(modelPortfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyModelPortfolioByIdValidateBeforeCall(UUID modelPortfolioId, ModelPortfolioDetails modelPortfolioDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelPortfolioId' is set
        if (modelPortfolioId == null) {
            throw new ApiException("Missing the required parameter 'modelPortfolioId' when calling modifyModelPortfolioById(Async)");
        }

        // verify the required parameter 'modelPortfolioDetails' is set
        if (modelPortfolioDetails == null) {
            throw new ApiException("Missing the required parameter 'modelPortfolioDetails' when calling modifyModelPortfolioById(Async)");
        }

        return modifyModelPortfolioByIdCall(modelPortfolioId, modelPortfolioDetails, _callback);

    }

    /**
     * Updates model portfolio object
     * 
     * @param modelPortfolioId The ID of the model portfolio to update. (required)
     * @param modelPortfolioDetails Use this endpoint change model asset class name and to add or remove a model portfolio security/model portfolio asset class. &lt;br /&gt;&lt;br /&gt; * The model portfolio name and model portfolio model type is required. &lt;br /&gt; * The model portfolio model type must be either 0 or 1. [0 -&gt; Securities based, 1 -&gt; Asset Class based] &lt;br /&gt;&lt;br /&gt; * If the model portfolio type is 0, the model portfolio asset class must be an empty array. &lt;br /&gt; * If the model portfolio type is 1, the model portfolio security must be an empty array. &lt;br /&gt;&lt;br /&gt; * When updating the model portfolio security, the percent is required. Only the symbol id is required for the symbol object &lt;br /&gt; * When updating the model portfolio asset classes, the percent is required. Only the model asset class id is required for the model asset class object &lt;br /&gt;&lt;br /&gt; * To remove all model portfolio securities or model portfolio asset class, set then to an empty array (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates model portfolio object with data from request body. </td><td>  -  </td></tr>
     </table>
     */
    public void modifyModelPortfolioById(UUID modelPortfolioId, ModelPortfolioDetails modelPortfolioDetails) throws ApiException {
        modifyModelPortfolioByIdWithHttpInfo(modelPortfolioId, modelPortfolioDetails);
    }

    /**
     * Updates model portfolio object
     * 
     * @param modelPortfolioId The ID of the model portfolio to update. (required)
     * @param modelPortfolioDetails Use this endpoint change model asset class name and to add or remove a model portfolio security/model portfolio asset class. &lt;br /&gt;&lt;br /&gt; * The model portfolio name and model portfolio model type is required. &lt;br /&gt; * The model portfolio model type must be either 0 or 1. [0 -&gt; Securities based, 1 -&gt; Asset Class based] &lt;br /&gt;&lt;br /&gt; * If the model portfolio type is 0, the model portfolio asset class must be an empty array. &lt;br /&gt; * If the model portfolio type is 1, the model portfolio security must be an empty array. &lt;br /&gt;&lt;br /&gt; * When updating the model portfolio security, the percent is required. Only the symbol id is required for the symbol object &lt;br /&gt; * When updating the model portfolio asset classes, the percent is required. Only the model asset class id is required for the model asset class object &lt;br /&gt;&lt;br /&gt; * To remove all model portfolio securities or model portfolio asset class, set then to an empty array (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates model portfolio object with data from request body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> modifyModelPortfolioByIdWithHttpInfo(UUID modelPortfolioId, ModelPortfolioDetails modelPortfolioDetails) throws ApiException {
        okhttp3.Call localVarCall = modifyModelPortfolioByIdValidateBeforeCall(modelPortfolioId, modelPortfolioDetails, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates model portfolio object (asynchronously)
     * 
     * @param modelPortfolioId The ID of the model portfolio to update. (required)
     * @param modelPortfolioDetails Use this endpoint change model asset class name and to add or remove a model portfolio security/model portfolio asset class. &lt;br /&gt;&lt;br /&gt; * The model portfolio name and model portfolio model type is required. &lt;br /&gt; * The model portfolio model type must be either 0 or 1. [0 -&gt; Securities based, 1 -&gt; Asset Class based] &lt;br /&gt;&lt;br /&gt; * If the model portfolio type is 0, the model portfolio asset class must be an empty array. &lt;br /&gt; * If the model portfolio type is 1, the model portfolio security must be an empty array. &lt;br /&gt;&lt;br /&gt; * When updating the model portfolio security, the percent is required. Only the symbol id is required for the symbol object &lt;br /&gt; * When updating the model portfolio asset classes, the percent is required. Only the model asset class id is required for the model asset class object &lt;br /&gt;&lt;br /&gt; * To remove all model portfolio securities or model portfolio asset class, set then to an empty array (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates model portfolio object with data from request body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyModelPortfolioByIdAsync(UUID modelPortfolioId, ModelPortfolioDetails modelPortfolioDetails, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyModelPortfolioByIdValidateBeforeCall(modelPortfolioId, modelPortfolioDetails, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for savePortfolio
     * @param portfolioGroupId The ID of the PortfolioGroup to update. (required)
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The PortfolioGroup object which was updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call savePortfolioCall(UUID portfolioGroupId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call savePortfolioValidateBeforeCall(UUID portfolioGroupId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling savePortfolio(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling savePortfolio(Async)");
        }

        return savePortfolioCall(portfolioGroupId, requestBody, _callback);

    }

    /**
     * Update an existing target portfolio.
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to update. (required)
     * @param requestBody  (required)
     * @return PortfolioGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The PortfolioGroup object which was updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public PortfolioGroup savePortfolio(UUID portfolioGroupId, Map<String, Object> requestBody) throws ApiException {
        ApiResponse<PortfolioGroup> localVarResp = savePortfolioWithHttpInfo(portfolioGroupId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Update an existing target portfolio.
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to update. (required)
     * @param requestBody  (required)
     * @return ApiResponse&lt;PortfolioGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The PortfolioGroup object which was updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PortfolioGroup> savePortfolioWithHttpInfo(UUID portfolioGroupId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = savePortfolioValidateBeforeCall(portfolioGroupId, requestBody, null);
        Type localVarReturnType = new TypeToken<PortfolioGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing target portfolio. (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to update. (required)
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The PortfolioGroup object which was updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call savePortfolioAsync(UUID portfolioGroupId, Map<String, Object> requestBody, final ApiCallback<PortfolioGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = savePortfolioValidateBeforeCall(portfolioGroupId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<PortfolioGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchPortfolioSymbols
     * @param portfolioGroupId The ID of the PortfolioGroup to search under (required)
     * @param symbolQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of UniversalSymbol objects which match the specified substring </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPortfolioSymbolsCall(UUID portfolioGroupId, SymbolQuery symbolQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = symbolQuery;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/symbols"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchPortfolioSymbolsValidateBeforeCall(UUID portfolioGroupId, SymbolQuery symbolQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling searchPortfolioSymbols(Async)");
        }

        return searchPortfolioSymbolsCall(portfolioGroupId, symbolQuery, _callback);

    }

    /**
     * Search for symbols limited to brokerages under the specified portfolio group
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to search under (required)
     * @param symbolQuery  (optional)
     * @return List&lt;UniversalSymbol&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of UniversalSymbol objects which match the specified substring </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public List<UniversalSymbol> searchPortfolioSymbols(UUID portfolioGroupId, SymbolQuery symbolQuery) throws ApiException {
        ApiResponse<List<UniversalSymbol>> localVarResp = searchPortfolioSymbolsWithHttpInfo(portfolioGroupId, symbolQuery);
        return localVarResp.getData();
    }

    /**
     * Search for symbols limited to brokerages under the specified portfolio group
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to search under (required)
     * @param symbolQuery  (optional)
     * @return ApiResponse&lt;List&lt;UniversalSymbol&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of UniversalSymbol objects which match the specified substring </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UniversalSymbol>> searchPortfolioSymbolsWithHttpInfo(UUID portfolioGroupId, SymbolQuery symbolQuery) throws ApiException {
        okhttp3.Call localVarCall = searchPortfolioSymbolsValidateBeforeCall(portfolioGroupId, symbolQuery, null);
        Type localVarReturnType = new TypeToken<List<UniversalSymbol>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for symbols limited to brokerages under the specified portfolio group (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to search under (required)
     * @param symbolQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of UniversalSymbol objects which match the specified substring </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPortfolioSymbolsAsync(UUID portfolioGroupId, SymbolQuery symbolQuery, final ApiCallback<List<UniversalSymbol>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchPortfolioSymbolsValidateBeforeCall(portfolioGroupId, symbolQuery, _callback);
        Type localVarReturnType = new TypeToken<List<UniversalSymbol>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setPortfolioTargets
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @param targetAsset  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A new target asset or set of target assets is created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPortfolioTargetsCall(UUID portfolioGroupId, List<TargetAsset> targetAsset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetAsset;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/targets"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPortfolioTargetsValidateBeforeCall(UUID portfolioGroupId, List<TargetAsset> targetAsset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling setPortfolioTargets(Async)");
        }

        return setPortfolioTargetsCall(portfolioGroupId, targetAsset, _callback);

    }

    /**
     * Set a new list of target assets under the specified PortfolioGroup. All existing target assets under this portfolio group will be replaced with the new list.
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @param targetAsset  (optional)
     * @return List&lt;TargetAsset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A new target asset or set of target assets is created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public List<TargetAsset> setPortfolioTargets(UUID portfolioGroupId, List<TargetAsset> targetAsset) throws ApiException {
        ApiResponse<List<TargetAsset>> localVarResp = setPortfolioTargetsWithHttpInfo(portfolioGroupId, targetAsset);
        return localVarResp.getData();
    }

    /**
     * Set a new list of target assets under the specified PortfolioGroup. All existing target assets under this portfolio group will be replaced with the new list.
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @param targetAsset  (optional)
     * @return ApiResponse&lt;List&lt;TargetAsset&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A new target asset or set of target assets is created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TargetAsset>> setPortfolioTargetsWithHttpInfo(UUID portfolioGroupId, List<TargetAsset> targetAsset) throws ApiException {
        okhttp3.Call localVarCall = setPortfolioTargetsValidateBeforeCall(portfolioGroupId, targetAsset, null);
        Type localVarReturnType = new TypeToken<List<TargetAsset>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set a new list of target assets under the specified PortfolioGroup. All existing target assets under this portfolio group will be replaced with the new list. (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to create the target asset. (required)
     * @param targetAsset  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A new target asset or set of target assets is created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPortfolioTargetsAsync(UUID portfolioGroupId, List<TargetAsset> targetAsset, final ApiCallback<List<TargetAsset>> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPortfolioTargetsValidateBeforeCall(portfolioGroupId, targetAsset, _callback);
        Type localVarReturnType = new TypeToken<List<TargetAsset>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAssetClass
     * @param modelAssetClassId The ID of the model asset class to update. (required)
     * @param modelAssetClassDetails Use this endpoint change model asset class name and to add or remove a model asset class target. &lt;br /&gt;&lt;br /&gt; * Only the model asset class name is required for the model asset class object. &lt;br /&gt; * Only the symbol id is required for the symbol object in the model asset class target object. &lt;br /&gt; * To remove all model asset class targets, set the model asset class target as an empty array (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates model asset class with data from request body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAssetClassCall(UUID modelAssetClassId, ModelAssetClassDetails modelAssetClassDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelAssetClassDetails;

        // create path and map variables
        String localVarPath = "/modelAssetClass/{modelAssetClassId}"
            .replace("{" + "modelAssetClassId" + "}", localVarApiClient.escapeString(modelAssetClassId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAssetClassValidateBeforeCall(UUID modelAssetClassId, ModelAssetClassDetails modelAssetClassDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelAssetClassId' is set
        if (modelAssetClassId == null) {
            throw new ApiException("Missing the required parameter 'modelAssetClassId' when calling updateAssetClass(Async)");
        }

        // verify the required parameter 'modelAssetClassDetails' is set
        if (modelAssetClassDetails == null) {
            throw new ApiException("Missing the required parameter 'modelAssetClassDetails' when calling updateAssetClass(Async)");
        }

        return updateAssetClassCall(modelAssetClassId, modelAssetClassDetails, _callback);

    }

    /**
     * Updates model asset class objects
     * 
     * @param modelAssetClassId The ID of the model asset class to update. (required)
     * @param modelAssetClassDetails Use this endpoint change model asset class name and to add or remove a model asset class target. &lt;br /&gt;&lt;br /&gt; * Only the model asset class name is required for the model asset class object. &lt;br /&gt; * Only the symbol id is required for the symbol object in the model asset class target object. &lt;br /&gt; * To remove all model asset class targets, set the model asset class target as an empty array (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates model asset class with data from request body. </td><td>  -  </td></tr>
     </table>
     */
    public void updateAssetClass(UUID modelAssetClassId, ModelAssetClassDetails modelAssetClassDetails) throws ApiException {
        updateAssetClassWithHttpInfo(modelAssetClassId, modelAssetClassDetails);
    }

    /**
     * Updates model asset class objects
     * 
     * @param modelAssetClassId The ID of the model asset class to update. (required)
     * @param modelAssetClassDetails Use this endpoint change model asset class name and to add or remove a model asset class target. &lt;br /&gt;&lt;br /&gt; * Only the model asset class name is required for the model asset class object. &lt;br /&gt; * Only the symbol id is required for the symbol object in the model asset class target object. &lt;br /&gt; * To remove all model asset class targets, set the model asset class target as an empty array (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates model asset class with data from request body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateAssetClassWithHttpInfo(UUID modelAssetClassId, ModelAssetClassDetails modelAssetClassDetails) throws ApiException {
        okhttp3.Call localVarCall = updateAssetClassValidateBeforeCall(modelAssetClassId, modelAssetClassDetails, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates model asset class objects (asynchronously)
     * 
     * @param modelAssetClassId The ID of the model asset class to update. (required)
     * @param modelAssetClassDetails Use this endpoint change model asset class name and to add or remove a model asset class target. &lt;br /&gt;&lt;br /&gt; * Only the model asset class name is required for the model asset class object. &lt;br /&gt; * Only the symbol id is required for the symbol object in the model asset class target object. &lt;br /&gt; * To remove all model asset class targets, set the model asset class target as an empty array (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates model asset class with data from request body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAssetClassAsync(UUID modelAssetClassId, ModelAssetClassDetails modelAssetClassDetails, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAssetClassValidateBeforeCall(modelAssetClassId, modelAssetClassDetails, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePortfolioSettings
     * @param portfolioGroupId The ID of the PortfolioGroup under which to patch the settings. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Settings of portfolio group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePortfolioSettingsCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/settings"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePortfolioSettingsValidateBeforeCall(UUID portfolioGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling updatePortfolioSettings(Async)");
        }

        return updatePortfolioSettingsCall(portfolioGroupId, _callback);

    }

    /**
     * Updates portfolio group settings
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to patch the settings. (required)
     * @return PortfolioGroupSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Settings of portfolio group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PortfolioGroupSettings updatePortfolioSettings(UUID portfolioGroupId) throws ApiException {
        ApiResponse<PortfolioGroupSettings> localVarResp = updatePortfolioSettingsWithHttpInfo(portfolioGroupId);
        return localVarResp.getData();
    }

    /**
     * Updates portfolio group settings
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to patch the settings. (required)
     * @return ApiResponse&lt;PortfolioGroupSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Settings of portfolio group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PortfolioGroupSettings> updatePortfolioSettingsWithHttpInfo(UUID portfolioGroupId) throws ApiException {
        okhttp3.Call localVarCall = updatePortfolioSettingsValidateBeforeCall(portfolioGroupId, null);
        Type localVarReturnType = new TypeToken<PortfolioGroupSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates portfolio group settings (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to patch the settings. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Settings of portfolio group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePortfolioSettingsAsync(UUID portfolioGroupId, final ApiCallback<PortfolioGroupSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePortfolioSettingsValidateBeforeCall(portfolioGroupId, _callback);
        Type localVarReturnType = new TypeToken<PortfolioGroupSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePortfolioTargetById
     * @param portfolioGroupId The ID of the PortfolioGroup under which to patch the target asset. (required)
     * @param targetAssetId The ID of the TargetAsset to patch. (required)
     * @param targetAsset  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The target asset is updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId or targetAssetId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId or targetAssetId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePortfolioTargetByIdCall(UUID portfolioGroupId, UUID targetAssetId, TargetAsset targetAsset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetAsset;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/targets/{targetAssetId}"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()))
            .replace("{" + "targetAssetId" + "}", localVarApiClient.escapeString(targetAssetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePortfolioTargetByIdValidateBeforeCall(UUID portfolioGroupId, UUID targetAssetId, TargetAsset targetAsset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling updatePortfolioTargetById(Async)");
        }

        // verify the required parameter 'targetAssetId' is set
        if (targetAssetId == null) {
            throw new ApiException("Missing the required parameter 'targetAssetId' when calling updatePortfolioTargetById(Async)");
        }

        // verify the required parameter 'targetAsset' is set
        if (targetAsset == null) {
            throw new ApiException("Missing the required parameter 'targetAsset' when calling updatePortfolioTargetById(Async)");
        }

        return updatePortfolioTargetByIdCall(portfolioGroupId, targetAssetId, targetAsset, _callback);

    }

    /**
     * Update a TargetAsset under the specified PortfolioGroup.
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to patch the target asset. (required)
     * @param targetAssetId The ID of the TargetAsset to patch. (required)
     * @param targetAsset  (required)
     * @return TargetAsset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The target asset is updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId or targetAssetId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId or targetAssetId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public TargetAsset updatePortfolioTargetById(UUID portfolioGroupId, UUID targetAssetId, TargetAsset targetAsset) throws ApiException {
        ApiResponse<TargetAsset> localVarResp = updatePortfolioTargetByIdWithHttpInfo(portfolioGroupId, targetAssetId, targetAsset);
        return localVarResp.getData();
    }

    /**
     * Update a TargetAsset under the specified PortfolioGroup.
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to patch the target asset. (required)
     * @param targetAssetId The ID of the TargetAsset to patch. (required)
     * @param targetAsset  (required)
     * @return ApiResponse&lt;TargetAsset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The target asset is updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId or targetAssetId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId or targetAssetId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetAsset> updatePortfolioTargetByIdWithHttpInfo(UUID portfolioGroupId, UUID targetAssetId, TargetAsset targetAsset) throws ApiException {
        okhttp3.Call localVarCall = updatePortfolioTargetByIdValidateBeforeCall(portfolioGroupId, targetAssetId, targetAsset, null);
        Type localVarReturnType = new TypeToken<TargetAsset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a TargetAsset under the specified PortfolioGroup. (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup under which to patch the target asset. (required)
     * @param targetAssetId The ID of the TargetAsset to patch. (required)
     * @param targetAsset  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The target asset is updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified portfolioGroupId or targetAssetId is invalid (not a UUID string) or the input data is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified portfolioGroupId or targetAssetId was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePortfolioTargetByIdAsync(UUID portfolioGroupId, UUID targetAssetId, TargetAsset targetAsset, final ApiCallback<TargetAsset> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePortfolioTargetByIdValidateBeforeCall(portfolioGroupId, targetAssetId, targetAsset, _callback);
        Type localVarReturnType = new TypeToken<TargetAsset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
