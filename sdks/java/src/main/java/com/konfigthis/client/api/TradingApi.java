/*
 * SnapTrade
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccountOrderRecord;
import com.konfigthis.client.model.ManualTradeAndImpact;
import com.konfigthis.client.model.ManualTradeForm;
import com.konfigthis.client.model.Model400FailedRequestResponse;
import com.konfigthis.client.model.Model403FailedRequestResponse;
import com.konfigthis.client.model.SymbolsQuotes;
import com.konfigthis.client.model.Trade;
import com.konfigthis.client.model.TradeExecutionStatus;
import com.konfigthis.client.model.TradeImpact;
import com.konfigthis.client.model.TradingPlaceOCOOrderRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TradingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TradingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TradingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelUserAccountOrder
     * @param userId  (required)
     * @param userSecret  (required)
     * @param accountId The ID of the account get positions. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order Record of canceled order </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to cancel open order. Please verify status in brokerage account </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelUserAccountOrderCall(String userId, String userSecret, UUID accountId, UUID body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/orders/cancel"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (userSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userSecret", userSecret));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelUserAccountOrderValidateBeforeCall(String userId, String userSecret, UUID accountId, UUID body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling cancelUserAccountOrder(Async)");
        }

        // verify the required parameter 'userSecret' is set
        if (userSecret == null) {
            throw new ApiException("Missing the required parameter 'userSecret' when calling cancelUserAccountOrder(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling cancelUserAccountOrder(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling cancelUserAccountOrder(Async)");
        }

        return cancelUserAccountOrderCall(userId, userSecret, accountId, body, _callback);

    }

    /**
     * Cancel open order in account
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param accountId The ID of the account get positions. (required)
     * @param body  (required)
     * @return AccountOrderRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order Record of canceled order </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to cancel open order. Please verify status in brokerage account </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public AccountOrderRecord cancelUserAccountOrder(String userId, String userSecret, UUID accountId, UUID body) throws ApiException {
        ApiResponse<AccountOrderRecord> localVarResp = cancelUserAccountOrderWithHttpInfo(userId, userSecret, accountId, body);
        return localVarResp.getData();
    }

    /**
     * Cancel open order in account
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param accountId The ID of the account get positions. (required)
     * @param body  (required)
     * @return ApiResponse&lt;AccountOrderRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order Record of canceled order </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to cancel open order. Please verify status in brokerage account </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountOrderRecord> cancelUserAccountOrderWithHttpInfo(String userId, String userSecret, UUID accountId, UUID body) throws ApiException {
        okhttp3.Call localVarCall = cancelUserAccountOrderValidateBeforeCall(userId, userSecret, accountId, body, null);
        Type localVarReturnType = new TypeToken<AccountOrderRecord>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel open order in account (asynchronously)
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param accountId The ID of the account get positions. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order Record of canceled order </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to cancel open order. Please verify status in brokerage account </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelUserAccountOrderAsync(String userId, String userSecret, UUID accountId, UUID body, final ApiCallback<AccountOrderRecord> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelUserAccountOrderValidateBeforeCall(userId, userSecret, accountId, body, _callback);
        Type localVarReturnType = new TypeToken<AccountOrderRecord>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCalculatedTradeImpactById
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param calculatedTradeId The ID of calculated trade to get account impact (required)
     * @param tradeId The ID of trade object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trade object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCalculatedTradeImpactByIdCall(UUID portfolioGroupId, UUID calculatedTradeId, UUID tradeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/calculatedtrades/{calculatedTradeId}/modify/{tradeId}"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()))
            .replace("{" + "calculatedTradeId" + "}", localVarApiClient.escapeString(calculatedTradeId.toString()))
            .replace("{" + "tradeId" + "}", localVarApiClient.escapeString(tradeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCalculatedTradeImpactByIdValidateBeforeCall(UUID portfolioGroupId, UUID calculatedTradeId, UUID tradeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling getCalculatedTradeImpactById(Async)");
        }

        // verify the required parameter 'calculatedTradeId' is set
        if (calculatedTradeId == null) {
            throw new ApiException("Missing the required parameter 'calculatedTradeId' when calling getCalculatedTradeImpactById(Async)");
        }

        // verify the required parameter 'tradeId' is set
        if (tradeId == null) {
            throw new ApiException("Missing the required parameter 'tradeId' when calling getCalculatedTradeImpactById(Async)");
        }

        return getCalculatedTradeImpactByIdCall(portfolioGroupId, calculatedTradeId, tradeId, _callback);

    }

    /**
     * Return details of a specific trade before it&#39;s placed
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param calculatedTradeId The ID of calculated trade to get account impact (required)
     * @param tradeId The ID of trade object (required)
     * @return Trade
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trade object </td><td>  -  </td></tr>
     </table>
     */
    public Trade getCalculatedTradeImpactById(UUID portfolioGroupId, UUID calculatedTradeId, UUID tradeId) throws ApiException {
        ApiResponse<Trade> localVarResp = getCalculatedTradeImpactByIdWithHttpInfo(portfolioGroupId, calculatedTradeId, tradeId);
        return localVarResp.getData();
    }

    /**
     * Return details of a specific trade before it&#39;s placed
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param calculatedTradeId The ID of calculated trade to get account impact (required)
     * @param tradeId The ID of trade object (required)
     * @return ApiResponse&lt;Trade&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trade object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Trade> getCalculatedTradeImpactByIdWithHttpInfo(UUID portfolioGroupId, UUID calculatedTradeId, UUID tradeId) throws ApiException {
        okhttp3.Call localVarCall = getCalculatedTradeImpactByIdValidateBeforeCall(portfolioGroupId, calculatedTradeId, tradeId, null);
        Type localVarReturnType = new TypeToken<Trade>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return details of a specific trade before it&#39;s placed (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param calculatedTradeId The ID of calculated trade to get account impact (required)
     * @param tradeId The ID of trade object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trade object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCalculatedTradeImpactByIdAsync(UUID portfolioGroupId, UUID calculatedTradeId, UUID tradeId, final ApiCallback<Trade> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCalculatedTradeImpactByIdValidateBeforeCall(portfolioGroupId, calculatedTradeId, tradeId, _callback);
        Type localVarReturnType = new TypeToken<Trade>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCalculatedTradesImpact
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param calculatedTradeId The ID of calculated trade to get account impact (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Impact of trades to make </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCalculatedTradesImpactCall(UUID portfolioGroupId, UUID calculatedTradeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/calculatedtrades/{calculatedTradeId}/impact"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()))
            .replace("{" + "calculatedTradeId" + "}", localVarApiClient.escapeString(calculatedTradeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCalculatedTradesImpactValidateBeforeCall(UUID portfolioGroupId, UUID calculatedTradeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling getCalculatedTradesImpact(Async)");
        }

        // verify the required parameter 'calculatedTradeId' is set
        if (calculatedTradeId == null) {
            throw new ApiException("Missing the required parameter 'calculatedTradeId' when calling getCalculatedTradesImpact(Async)");
        }

        return getCalculatedTradesImpactCall(portfolioGroupId, calculatedTradeId, _callback);

    }

    /**
     * Return the impact of placing a series of trades on the portfolio
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param calculatedTradeId The ID of calculated trade to get account impact (required)
     * @return List&lt;TradeImpact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Impact of trades to make </td><td>  -  </td></tr>
     </table>
     */
    public List<TradeImpact> getCalculatedTradesImpact(UUID portfolioGroupId, UUID calculatedTradeId) throws ApiException {
        ApiResponse<List<TradeImpact>> localVarResp = getCalculatedTradesImpactWithHttpInfo(portfolioGroupId, calculatedTradeId);
        return localVarResp.getData();
    }

    /**
     * Return the impact of placing a series of trades on the portfolio
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param calculatedTradeId The ID of calculated trade to get account impact (required)
     * @return ApiResponse&lt;List&lt;TradeImpact&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Impact of trades to make </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TradeImpact>> getCalculatedTradesImpactWithHttpInfo(UUID portfolioGroupId, UUID calculatedTradeId) throws ApiException {
        okhttp3.Call localVarCall = getCalculatedTradesImpactValidateBeforeCall(portfolioGroupId, calculatedTradeId, null);
        Type localVarReturnType = new TypeToken<List<TradeImpact>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the impact of placing a series of trades on the portfolio (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param calculatedTradeId The ID of calculated trade to get account impact (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Impact of trades to make </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCalculatedTradesImpactAsync(UUID portfolioGroupId, UUID calculatedTradeId, final ApiCallback<List<TradeImpact>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCalculatedTradesImpactValidateBeforeCall(portfolioGroupId, calculatedTradeId, _callback);
        Type localVarReturnType = new TypeToken<List<TradeImpact>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderImpact
     * @param userId  (required)
     * @param userSecret  (required)
     * @param manualTradeForm  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return trade object and it&#39;s impact on the account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or wrong data format provided in request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permissions to place trades </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderImpactCall(String userId, String userSecret, ManualTradeForm manualTradeForm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manualTradeForm;

        // create path and map variables
        String localVarPath = "/trade/impact";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (userSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userSecret", userSecret));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderImpactValidateBeforeCall(String userId, String userSecret, ManualTradeForm manualTradeForm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getOrderImpact(Async)");
        }

        // verify the required parameter 'userSecret' is set
        if (userSecret == null) {
            throw new ApiException("Missing the required parameter 'userSecret' when calling getOrderImpact(Async)");
        }

        // verify the required parameter 'manualTradeForm' is set
        if (manualTradeForm == null) {
            throw new ApiException("Missing the required parameter 'manualTradeForm' when calling getOrderImpact(Async)");
        }

        return getOrderImpactCall(userId, userSecret, manualTradeForm, _callback);

    }

    /**
     * Check impact of trades on account.
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param manualTradeForm  (required)
     * @return ManualTradeAndImpact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return trade object and it&#39;s impact on the account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or wrong data format provided in request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permissions to place trades </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ManualTradeAndImpact getOrderImpact(String userId, String userSecret, ManualTradeForm manualTradeForm) throws ApiException {
        ApiResponse<ManualTradeAndImpact> localVarResp = getOrderImpactWithHttpInfo(userId, userSecret, manualTradeForm);
        return localVarResp.getData();
    }

    /**
     * Check impact of trades on account.
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param manualTradeForm  (required)
     * @return ApiResponse&lt;ManualTradeAndImpact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return trade object and it&#39;s impact on the account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or wrong data format provided in request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permissions to place trades </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManualTradeAndImpact> getOrderImpactWithHttpInfo(String userId, String userSecret, ManualTradeForm manualTradeForm) throws ApiException {
        okhttp3.Call localVarCall = getOrderImpactValidateBeforeCall(userId, userSecret, manualTradeForm, null);
        Type localVarReturnType = new TypeToken<ManualTradeAndImpact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check impact of trades on account. (asynchronously)
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param manualTradeForm  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return trade object and it&#39;s impact on the account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or wrong data format provided in request body </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permissions to place trades </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderImpactAsync(String userId, String userSecret, ManualTradeForm manualTradeForm, final ApiCallback<ManualTradeAndImpact> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderImpactValidateBeforeCall(userId, userSecret, manualTradeForm, _callback);
        Type localVarReturnType = new TypeToken<ManualTradeAndImpact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserAccountQuotes
     * @param userId  (required)
     * @param userSecret  (required)
     * @param symbols List of universal_symbol_id or tickers to get quotes for. (required)
     * @param accountId The ID of the account to get quotes. (required)
     * @param useTicker Should be set to True if providing tickers. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns quotes object with different prices </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAccountQuotesCall(String userId, String userSecret, UUID symbols, UUID accountId, Boolean useTicker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/quotes"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (userSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userSecret", userSecret));
        }

        if (symbols != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbols", symbols));
        }

        if (useTicker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_ticker", useTicker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserAccountQuotesValidateBeforeCall(String userId, String userSecret, UUID symbols, UUID accountId, Boolean useTicker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserAccountQuotes(Async)");
        }

        // verify the required parameter 'userSecret' is set
        if (userSecret == null) {
            throw new ApiException("Missing the required parameter 'userSecret' when calling getUserAccountQuotes(Async)");
        }

        // verify the required parameter 'symbols' is set
        if (symbols == null) {
            throw new ApiException("Missing the required parameter 'symbols' when calling getUserAccountQuotes(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getUserAccountQuotes(Async)");
        }

        return getUserAccountQuotesCall(userId, userSecret, symbols, accountId, useTicker, _callback);

    }

    /**
     * Get symbol quotes
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param symbols List of universal_symbol_id or tickers to get quotes for. (required)
     * @param accountId The ID of the account to get quotes. (required)
     * @param useTicker Should be set to True if providing tickers. (optional)
     * @return SymbolsQuotes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns quotes object with different prices </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public SymbolsQuotes getUserAccountQuotes(String userId, String userSecret, UUID symbols, UUID accountId, Boolean useTicker) throws ApiException {
        ApiResponse<SymbolsQuotes> localVarResp = getUserAccountQuotesWithHttpInfo(userId, userSecret, symbols, accountId, useTicker);
        return localVarResp.getData();
    }

    /**
     * Get symbol quotes
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param symbols List of universal_symbol_id or tickers to get quotes for. (required)
     * @param accountId The ID of the account to get quotes. (required)
     * @param useTicker Should be set to True if providing tickers. (optional)
     * @return ApiResponse&lt;SymbolsQuotes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns quotes object with different prices </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SymbolsQuotes> getUserAccountQuotesWithHttpInfo(String userId, String userSecret, UUID symbols, UUID accountId, Boolean useTicker) throws ApiException {
        okhttp3.Call localVarCall = getUserAccountQuotesValidateBeforeCall(userId, userSecret, symbols, accountId, useTicker, null);
        Type localVarReturnType = new TypeToken<SymbolsQuotes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get symbol quotes (asynchronously)
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param symbols List of universal_symbol_id or tickers to get quotes for. (required)
     * @param accountId The ID of the account to get quotes. (required)
     * @param useTicker Should be set to True if providing tickers. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns quotes object with different prices </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAccountQuotesAsync(String userId, String userSecret, UUID symbols, UUID accountId, Boolean useTicker, final ApiCallback<SymbolsQuotes> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserAccountQuotesValidateBeforeCall(userId, userSecret, symbols, accountId, useTicker, _callback);
        Type localVarReturnType = new TypeToken<SymbolsQuotes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyCalculatedTradeById
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param calculatedTradeId The ID of calculated trade to get account impact (required)
     * @param tradeId The ID of trade object (required)
     * @param trade  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modified trade object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyCalculatedTradeByIdCall(UUID portfolioGroupId, UUID calculatedTradeId, UUID tradeId, Trade trade, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trade;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/calculatedtrades/{calculatedTradeId}/modify/{tradeId}"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()))
            .replace("{" + "calculatedTradeId" + "}", localVarApiClient.escapeString(calculatedTradeId.toString()))
            .replace("{" + "tradeId" + "}", localVarApiClient.escapeString(tradeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyCalculatedTradeByIdValidateBeforeCall(UUID portfolioGroupId, UUID calculatedTradeId, UUID tradeId, Trade trade, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling modifyCalculatedTradeById(Async)");
        }

        // verify the required parameter 'calculatedTradeId' is set
        if (calculatedTradeId == null) {
            throw new ApiException("Missing the required parameter 'calculatedTradeId' when calling modifyCalculatedTradeById(Async)");
        }

        // verify the required parameter 'tradeId' is set
        if (tradeId == null) {
            throw new ApiException("Missing the required parameter 'tradeId' when calling modifyCalculatedTradeById(Async)");
        }

        return modifyCalculatedTradeByIdCall(portfolioGroupId, calculatedTradeId, tradeId, trade, _callback);

    }

    /**
     * Modify units of a trade before it is placed
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param calculatedTradeId The ID of calculated trade to get account impact (required)
     * @param tradeId The ID of trade object (required)
     * @param trade  (optional)
     * @return Trade
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modified trade object </td><td>  -  </td></tr>
     </table>
     */
    public Trade modifyCalculatedTradeById(UUID portfolioGroupId, UUID calculatedTradeId, UUID tradeId, Trade trade) throws ApiException {
        ApiResponse<Trade> localVarResp = modifyCalculatedTradeByIdWithHttpInfo(portfolioGroupId, calculatedTradeId, tradeId, trade);
        return localVarResp.getData();
    }

    /**
     * Modify units of a trade before it is placed
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param calculatedTradeId The ID of calculated trade to get account impact (required)
     * @param tradeId The ID of trade object (required)
     * @param trade  (optional)
     * @return ApiResponse&lt;Trade&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modified trade object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Trade> modifyCalculatedTradeByIdWithHttpInfo(UUID portfolioGroupId, UUID calculatedTradeId, UUID tradeId, Trade trade) throws ApiException {
        okhttp3.Call localVarCall = modifyCalculatedTradeByIdValidateBeforeCall(portfolioGroupId, calculatedTradeId, tradeId, trade, null);
        Type localVarReturnType = new TypeToken<Trade>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify units of a trade before it is placed (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param calculatedTradeId The ID of calculated trade to get account impact (required)
     * @param tradeId The ID of trade object (required)
     * @param trade  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modified trade object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyCalculatedTradeByIdAsync(UUID portfolioGroupId, UUID calculatedTradeId, UUID tradeId, Trade trade, final ApiCallback<Trade> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyCalculatedTradeByIdValidateBeforeCall(portfolioGroupId, calculatedTradeId, tradeId, trade, _callback);
        Type localVarReturnType = new TypeToken<Trade>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeCalculatedTrades
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param calculatedTradeId The ID of calculated trade to get account impact (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return trade execution statuses for all trades submitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeCalculatedTradesCall(UUID portfolioGroupId, UUID calculatedTradeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioGroups/{portfolioGroupId}/calculatedtrades/{calculatedTradeId}/placeOrders"
            .replace("{" + "portfolioGroupId" + "}", localVarApiClient.escapeString(portfolioGroupId.toString()))
            .replace("{" + "calculatedTradeId" + "}", localVarApiClient.escapeString(calculatedTradeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeCalculatedTradesValidateBeforeCall(UUID portfolioGroupId, UUID calculatedTradeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGroupId' is set
        if (portfolioGroupId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGroupId' when calling placeCalculatedTrades(Async)");
        }

        // verify the required parameter 'calculatedTradeId' is set
        if (calculatedTradeId == null) {
            throw new ApiException("Missing the required parameter 'calculatedTradeId' when calling placeCalculatedTrades(Async)");
        }

        return placeCalculatedTradesCall(portfolioGroupId, calculatedTradeId, _callback);

    }

    /**
     * Place orders for the CalculatedTrades in series
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param calculatedTradeId The ID of calculated trade to get account impact (required)
     * @return List&lt;TradeExecutionStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return trade execution statuses for all trades submitted </td><td>  -  </td></tr>
     </table>
     */
    public List<TradeExecutionStatus> placeCalculatedTrades(UUID portfolioGroupId, UUID calculatedTradeId) throws ApiException {
        ApiResponse<List<TradeExecutionStatus>> localVarResp = placeCalculatedTradesWithHttpInfo(portfolioGroupId, calculatedTradeId);
        return localVarResp.getData();
    }

    /**
     * Place orders for the CalculatedTrades in series
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param calculatedTradeId The ID of calculated trade to get account impact (required)
     * @return ApiResponse&lt;List&lt;TradeExecutionStatus&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return trade execution statuses for all trades submitted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TradeExecutionStatus>> placeCalculatedTradesWithHttpInfo(UUID portfolioGroupId, UUID calculatedTradeId) throws ApiException {
        okhttp3.Call localVarCall = placeCalculatedTradesValidateBeforeCall(portfolioGroupId, calculatedTradeId, null);
        Type localVarReturnType = new TypeToken<List<TradeExecutionStatus>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Place orders for the CalculatedTrades in series (asynchronously)
     * 
     * @param portfolioGroupId The ID of the PortfolioGroup to perform rebalancing calculations (required)
     * @param calculatedTradeId The ID of calculated trade to get account impact (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return trade execution statuses for all trades submitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeCalculatedTradesAsync(UUID portfolioGroupId, UUID calculatedTradeId, final ApiCallback<List<TradeExecutionStatus>> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeCalculatedTradesValidateBeforeCall(portfolioGroupId, calculatedTradeId, _callback);
        Type localVarReturnType = new TypeToken<List<TradeExecutionStatus>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeForceOrder
     * @param userId  (required)
     * @param userSecret  (required)
     * @param manualTradeForm  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trade sucessfully placed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Trade could not be placed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permissions to place trades </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeForceOrderCall(String userId, String userSecret, ManualTradeForm manualTradeForm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manualTradeForm;

        // create path and map variables
        String localVarPath = "/trade/place";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (userSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userSecret", userSecret));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeForceOrderValidateBeforeCall(String userId, String userSecret, ManualTradeForm manualTradeForm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling placeForceOrder(Async)");
        }

        // verify the required parameter 'userSecret' is set
        if (userSecret == null) {
            throw new ApiException("Missing the required parameter 'userSecret' when calling placeForceOrder(Async)");
        }

        // verify the required parameter 'manualTradeForm' is set
        if (manualTradeForm == null) {
            throw new ApiException("Missing the required parameter 'manualTradeForm' when calling placeForceOrder(Async)");
        }

        return placeForceOrderCall(userId, userSecret, manualTradeForm, _callback);

    }

    /**
     * Place a trade with NO validation.
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param manualTradeForm  (required)
     * @return AccountOrderRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trade sucessfully placed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Trade could not be placed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permissions to place trades </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountOrderRecord placeForceOrder(String userId, String userSecret, ManualTradeForm manualTradeForm) throws ApiException {
        ApiResponse<AccountOrderRecord> localVarResp = placeForceOrderWithHttpInfo(userId, userSecret, manualTradeForm);
        return localVarResp.getData();
    }

    /**
     * Place a trade with NO validation.
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param manualTradeForm  (required)
     * @return ApiResponse&lt;AccountOrderRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trade sucessfully placed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Trade could not be placed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permissions to place trades </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountOrderRecord> placeForceOrderWithHttpInfo(String userId, String userSecret, ManualTradeForm manualTradeForm) throws ApiException {
        okhttp3.Call localVarCall = placeForceOrderValidateBeforeCall(userId, userSecret, manualTradeForm, null);
        Type localVarReturnType = new TypeToken<AccountOrderRecord>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Place a trade with NO validation. (asynchronously)
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param manualTradeForm  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Trade sucessfully placed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Trade could not be placed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have permissions to place trades </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeForceOrderAsync(String userId, String userSecret, ManualTradeForm manualTradeForm, final ApiCallback<AccountOrderRecord> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeForceOrderValidateBeforeCall(userId, userSecret, manualTradeForm, _callback);
        Type localVarReturnType = new TypeToken<AccountOrderRecord>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeOCOOrder
     * @param userId  (required)
     * @param userSecret  (required)
     * @param tradingPlaceOCOOrderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of order placed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to submit order to broker </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeOCOOrderCall(String userId, String userSecret, TradingPlaceOCOOrderRequest tradingPlaceOCOOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tradingPlaceOCOOrderRequest;

        // create path and map variables
        String localVarPath = "/trade/oco";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (userSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userSecret", userSecret));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeOCOOrderValidateBeforeCall(String userId, String userSecret, TradingPlaceOCOOrderRequest tradingPlaceOCOOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling placeOCOOrder(Async)");
        }

        // verify the required parameter 'userSecret' is set
        if (userSecret == null) {
            throw new ApiException("Missing the required parameter 'userSecret' when calling placeOCOOrder(Async)");
        }

        // verify the required parameter 'tradingPlaceOCOOrderRequest' is set
        if (tradingPlaceOCOOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'tradingPlaceOCOOrderRequest' when calling placeOCOOrder(Async)");
        }

        return placeOCOOrderCall(userId, userSecret, tradingPlaceOCOOrderRequest, _callback);

    }

    /**
     * Place a OCO (One Cancels Other) order
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param tradingPlaceOCOOrderRequest  (required)
     * @return AccountOrderRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of order placed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to submit order to broker </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountOrderRecord placeOCOOrder(String userId, String userSecret, TradingPlaceOCOOrderRequest tradingPlaceOCOOrderRequest) throws ApiException {
        ApiResponse<AccountOrderRecord> localVarResp = placeOCOOrderWithHttpInfo(userId, userSecret, tradingPlaceOCOOrderRequest);
        return localVarResp.getData();
    }

    /**
     * Place a OCO (One Cancels Other) order
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param tradingPlaceOCOOrderRequest  (required)
     * @return ApiResponse&lt;AccountOrderRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of order placed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to submit order to broker </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountOrderRecord> placeOCOOrderWithHttpInfo(String userId, String userSecret, TradingPlaceOCOOrderRequest tradingPlaceOCOOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = placeOCOOrderValidateBeforeCall(userId, userSecret, tradingPlaceOCOOrderRequest, null);
        Type localVarReturnType = new TypeToken<AccountOrderRecord>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Place a OCO (One Cancels Other) order (asynchronously)
     * 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param tradingPlaceOCOOrderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of order placed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to submit order to broker </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeOCOOrderAsync(String userId, String userSecret, TradingPlaceOCOOrderRequest tradingPlaceOCOOrderRequest, final ApiCallback<AccountOrderRecord> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeOCOOrderValidateBeforeCall(userId, userSecret, tradingPlaceOCOOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountOrderRecord>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeOrder
     * @param tradeId The ID of trade object obtained from trade/impact endpoint (required)
     * @param userId  (required)
     * @param userSecret  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of order placed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to submit order to broker </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeOrderCall(UUID tradeId, String userId, String userSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trade/{tradeId}"
            .replace("{" + "tradeId" + "}", localVarApiClient.escapeString(tradeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (userSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userSecret", userSecret));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeOrderValidateBeforeCall(UUID tradeId, String userId, String userSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tradeId' is set
        if (tradeId == null) {
            throw new ApiException("Missing the required parameter 'tradeId' when calling placeOrder(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling placeOrder(Async)");
        }

        // verify the required parameter 'userSecret' is set
        if (userSecret == null) {
            throw new ApiException("Missing the required parameter 'userSecret' when calling placeOrder(Async)");
        }

        return placeOrderCall(tradeId, userId, userSecret, _callback);

    }

    /**
     * Place order
     * 
     * @param tradeId The ID of trade object obtained from trade/impact endpoint (required)
     * @param userId  (required)
     * @param userSecret  (required)
     * @return AccountOrderRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of order placed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to submit order to broker </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountOrderRecord placeOrder(UUID tradeId, String userId, String userSecret) throws ApiException {
        ApiResponse<AccountOrderRecord> localVarResp = placeOrderWithHttpInfo(tradeId, userId, userSecret);
        return localVarResp.getData();
    }

    /**
     * Place order
     * 
     * @param tradeId The ID of trade object obtained from trade/impact endpoint (required)
     * @param userId  (required)
     * @param userSecret  (required)
     * @return ApiResponse&lt;AccountOrderRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of order placed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to submit order to broker </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountOrderRecord> placeOrderWithHttpInfo(UUID tradeId, String userId, String userSecret) throws ApiException {
        okhttp3.Call localVarCall = placeOrderValidateBeforeCall(tradeId, userId, userSecret, null);
        Type localVarReturnType = new TypeToken<AccountOrderRecord>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Place order (asynchronously)
     * 
     * @param tradeId The ID of trade object obtained from trade/impact endpoint (required)
     * @param userId  (required)
     * @param userSecret  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of order placed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to submit order to broker </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeOrderAsync(UUID tradeId, String userId, String userSecret, final ApiCallback<AccountOrderRecord> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeOrderValidateBeforeCall(tradeId, userId, userSecret, _callback);
        Type localVarReturnType = new TypeToken<AccountOrderRecord>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
