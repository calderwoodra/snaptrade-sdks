/*
 * SnapTrade
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.model.Account;
import com.konfigthis.client.model.AccountHoldings;
import com.konfigthis.client.model.Balance;
import com.konfigthis.client.model.Model400FailedRequestResponse;
import com.konfigthis.client.model.Model403FailedRequestResponse;
import com.konfigthis.client.model.Position;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountInformationApi
 */
@Disabled
public class AccountInformationApiTest {

    private final AccountInformationApi api = new AccountInformationApi();

    /**
     * Get all cash balances of an investment account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsAccountIdBalancesGetTest() throws ApiException {
        String userId = null;
        String userSecret = null;
        UUID accountId = null;
        List<Balance> response = api.accountsAccountIdBalancesGet(userId, userSecret, accountId);
        // TODO: test validations
    }

    /**
     * Return details of a specific investment account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsAccountIdGetTest() throws ApiException {
        String userId = null;
        String userSecret = null;
        UUID accountId = null;
        List<Account> response = api.accountsAccountIdGet(userId, userSecret, accountId);
        // TODO: test validations
    }

    /**
     * List balances, positions and orders for the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsAccountIdHoldingsGetTest() throws ApiException {
        UUID accountId = null;
        String userId = null;
        String userSecret = null;
        AccountHoldings response = api.accountsAccountIdHoldingsGet(accountId, userId, userSecret);
        // TODO: test validations
    }

    /**
     * Get all positions of an investment account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsAccountIdPositionsGetTest() throws ApiException {
        String userId = null;
        String userSecret = null;
        UUID accountId = null;
        List<Position> response = api.accountsAccountIdPositionsGet(userId, userSecret, accountId);
        // TODO: test validations
    }

    /**
     * Update details of an investment account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsAccountIdPutTest() throws ApiException {
        String userId = null;
        String userSecret = null;
        UUID accountId = null;
        List<Account> response = api.accountsAccountIdPut(userId, userSecret, accountId);
        // TODO: test validations
    }

    /**
     * List all investment accounts for the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsGetTest() throws ApiException {
        String userId = null;
        String userSecret = null;
        List<Account> response = api.accountsGet(userId, userSecret);
        // TODO: test validations
    }

    /**
     * List all accounts for the user, plus balances and positions for each account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void holdingsGetTest() throws ApiException {
        String userId = null;
        String userSecret = null;
        UUID brokerageAuthorizations = null;
        List<AccountHoldings> response = api.holdingsGet(userId, userSecret, brokerageAuthorizations);
        // TODO: test validations
    }

}
